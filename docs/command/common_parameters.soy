/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.commonparameters}

/**
 * @param value The numeric value for the verbosity level.
 * @param bool The Java boolean function for the verbosity level. 
 * @param description A description of what the verbosity level means.
 */
{template .verbose_levels}
  <tr> 
    <td class="verbose-levels">  
      <code class="not-inline">{$value}</code>
    </td>
    <td class="verbose-levels"> 
      <code class="not-inline">{$bool}</code>
    </td>
    <td class="verbose-levels"> 
      {$description|noAutoescape}
    </td>
  </tr>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Common Parameters' /}
    {param navid: 'command_common_parameters' /}
    {param description}
      Command-line parameters that affect all commands.
    {/param}
    {param content}


{call buck.command}
{param overview}

<p>
  Some command-line parameters affect the operation of Buck itself,
  regardless of which subcommand is being run.
</p>

{/param}

{param params}

{call buck.param}
  {param name: 'verbose' /}
  {param desc}
  <p>
    Set the verbosity level of the console output.  The verbosity level
    is a single numeric value between <code>1</code> and <code>8</code>
    inclusive. For example:
  </p>

<p>
<pre>
{literal}
buck targets --verbose 8
{/literal}
</pre>
</p>

  <p>
    Higher verbosity levels include all the output for lower
    levels. 
  </p>

  <p>
    The output that Buck produces is affected by factors in addition to
    the verbosity level. Such factors include, for example, the
    subcommand (<code>build</code>, <code>install</code>, <code>test</code>, etc), 
    the types of rules being built, and the degree to which artifacts 
    from previous builds have been cached.
  </p>

  <p>
    Buck has not yet implemented differences between all levels. For
    example, there are currently no differences in verbosity between
    levels <code>5</code> and <code>7</code> inclusive.
  </p>

<table>

<tr>
  <th>Numeric level</th><th>Boolean</th><th>Description</th>
</tr>

{call .verbose_levels}
  {param value: '1' /}
  {param bool: 'shouldPrintStandardInformation()' /}
  {param description}
    Print warnings from build steps and summary information for tests.
  {/param}
  {/call}

{call .verbose_levels}
  {param value: '2' /}
  {param bool: 'shouldPrintBinaryRunInformation()' /}
  {param description}
    Print additional output for generated binaries or tests.
  {/param}
  {/call}

{call .verbose_levels}
  {param value: '3' /}
  {param bool: 'shouldPrintCommand()' /}
  {param description}
    Print commands that Buck runs during the build process.
  {/param}
  {/call}

{call .verbose_levels}
  {param value: '4' /}
  {param bool: 'shouldPrintSelectCommandOutput()' /}
  {param description}
    Print output for selected commands that Buck runs.
  {/param}
  {/call}

{call .verbose_levels}
  {param value: '5 - 7' /}
  {param bool: 'shouldPrintOutput()' /}
  {param description}
    Print output for all commands that Buck runs.
  {/param}
  {/call}

{call .verbose_levels}
  {param value: '8' /}
  {param bool: 'shouldUseVerbosityFlagIfAvailable()' /}
  {param description}
    Print all available diagnostic/logging information.
  {/param}
  {/call}

  {/param}
{/call}

</table>

  <p>
    For more precise information about how a particular verbosity level
    affects output, you can search the Buck source code for the
    corresponding boolean function. For example:
  </p>

<p>
<pre>
{literal}
grep --recursive "getVerbosity().shouldPrintOutput()" ~/local/buck/src 
{/literal}
</pre>
</p>

{call buck.param}
  {param name: 'no-cache' /}
  {param desc}
    <p>
      Disable the build artifact caches. If this parameter is specified, Buck
      ignores any artifacts in any of the caches specified in 
      the {call buckconfig.cache /} section of <code>.buckconfig</code>. 
      These include the filesystem cache (<code>dir</code>), remote cache (<code>http</code>), 
      and SQLite cache (<code>sqlite</code>). 
    </p>

    <p>
      The contents of the caches are unaffected, but Buck does not use
      them for the specified command.
    </p>

    <p>
      Note that if there is an output file in the <code>buck-out</code> directory 
      for a previously-built and unchanged rule, Buck will still
      use that output file in your build&mdash;even if <code>--no-cache</code> is specified. 
      If you don't want to use these existing and valid artifacts, 
      run the {call buck.cmd_link}{param name: 'clean' /}{/call} command 
      to delete them from <code>buck-out</code>.
    </p>
  {/param}
{/call}

{call buck.param}
  {param name: 'config' /}
  {param desc}

  <p>
  Specify configuration settings or override existing settings 
  in {call buck.buckconfig_link /}.  For example:
  </p>

<p>
<pre>
{literal}
buck build --config cache.mode=dir ...
{/literal}
</pre>
</p>

<p>
The <code>--config</code> parameter can be specified multiple times on
the same command line. Note, however, that if the same configuration 
option is specified more than once, Buck uses the last value specified 
("last write wins"). For example, the following invocation 
of <code>buck build</code> builds 
the <code><literal>//:prod</literal></code> target, 
rather than the <code><literal>//:dev</literal></code> target, 
which was specified earlier on the command line.
</p>

<p>
<pre>
{literal}
#
# Build for development? 
#
# No, build for production.
#
buck build --config 'alias.main=//:dev' --config 'alias.main=//:prod' main
{/literal}
</pre>
</p>

<p>
The preferred method of overriding values in <code>.buckconfig</code> is
by using a <code>.buckconfig.local</code> file.
Overriding values of <code>.buckconfig</code> from the command line makes 
reproducing builds difficult. 
</p>

  {/param}
{/call}

{call buck.param}
  {param name: 'config-file' /}
  {param desc}

<p>
Specify build-configuration settings in a file that uses the same syntax 
as {call buck.buckconfig_link /}.
</p>

<p>
<pre>
{literal}
buck build --config-file debug.buckconfig
{/literal}
</pre>
</p>

<p>
The <code>--config-file</code> parameter provides functionality similar 
to <code>--flagfile</code>, but with <code>.buckconfig</code> syntax 
rather than command-line parameter syntax.
</p>

<p>
Any values specified using <code>--config-file</code> override values
specified in <code>.buckconfig</code> and <code>.buckconfig.local</code>.
</p>

<p>
  You can specify the path to the configuration file in one of three
  ways.
</p>

<h5>
  Use a path that is relative to the directory that contains the current
  cell's <code>.buckconfig</code>.
</h5>

<p>
<pre>
{literal}
--config-file relative/path/to/file.buckconfig
{/literal}
</pre>
</p>

<h5>
  Use a path that is relative to the directory that contains 
  a <em>specified</em> cell's <code>.buckconfig</code>.
</h5>

<p>
<pre>
{literal}
--config-file cell&#x2F;&#x2F;path/to/file.buckconfig
{/literal}
</pre>
</p>

<h5>
  Use an absolute path from the root of your file system.
</h5>

<p>
<pre>
{literal}
--config-file /absolute/path/to/file.buckconfig
{/literal}
</pre>
</p>

<p>
  You can also specify a particular cell to which to apply the
  configuration.  By default, the settings in the configuration file
  apply to <em>all</em> cells in the current build. 
</p>

<h5>Apply the configuration only to the current cell.</h5>

<p>
<pre>
{literal}
--config-file &#x2F;&#x2F;=&lt;path-to-config-file>
{/literal}
</pre>
</p>

<h5>Apply the configuration only to a specified target cell.</h5>

<p>
<pre>
{literal}
--config-file &lt;target-cell>=&lt;path-to-config-file>
{/literal}
</pre>
</p>

<p>
  If you specify <code>*</code> as the target cell, the configuration is
  applied to <em>all</em> the cells in the build. This is the default,
  but this syntax enables you to be explicit.
</p>

  {/param}
{/call}

{call buck.param}
  {param name: 'num-threads' /}
  {param desc}

  <p>
  The number of threads that buck should use when executing jobs.
  This defaults to 1.25 times the number of processors in the
  system; on systems with hyperthreading, this means that each core is
  counted twice. The number of threads to use for building can also
  be set by adding a "<code>threads</code>" key to the{sp}
  "<code>build</code>" section of the <code>.buckconfig</code> file.
  </p>

  <p>
  The order of precedence for setting the number of build threads
  (from highest to lowest) is: 

  <ol>
    <li>
      command-line option
    </li>
    <li>
      <code>.buckconfig</code> setting
    </li>
    <li>
      default value
    </li>
  </ol>

  </p>

  <p>
  The number of active threads may not always be equal to this
  argument.
  </p>
 {/param}
{/call}

{call buck.param}
  {param name: '--flagfile /path/to/commandline-args or @/path/to/commandline-args' /}
  {param nodash: true /}
  {param desc}

  <p>
  Specify additional command-line arguments in external files
  (<em>flag files</em>), one argument per line. The arguments in these 
  files can themselves be <code>--flagfile</code> or <code>@</code> arguments, 
  which would then include a second file's contents as arguments.
  </p>

<p>
<pre class = "prettyprint lang-ini">
{literal}
# File config/common
--verbose
{/literal}
</pre>
</p>

<p>
<pre class = "prettyprint lang-ini">
{literal}
# File config/gcc
@config/common
--config
cxx.cxx=/usr/bin/g++
...
{/literal}
</pre>
</p>

<p>
<pre class = "prettyprint lang-ini">
{literal}
# File config/clang
@config/common
--config
cxx.cxx=/usr/bin/clang++
...
{/literal}
</pre>
</p>

<p>
<pre class = "prettyprint lang-ini">
{literal}
buck build @config/gcc foo/bar:
buck build @config/clang foo/bar:
{/literal}
</pre>
</p>

<p>
Lines in flag files must not have any leading or trailing white space.
</p>

<p>
The equals sign (<code>=</code>) separates the specified property and
value. There should be no white space between the property and
equals sign, nor between the equals sign and the value. 
<p>

<p>
We recommend that you use <code>--flagfile</code> rather than 
the <code>@</code> symbol as it is more self-describing.
</p>

<p>
This <code>--config-file</code> parameter provides functionality similar 
to <code>--flagfile</code>, but with <code>.buckconfig</code> syntax 
rather than command-line parameter syntax.
</p>

<p>
If Buck is regularly invoked with different sets of arguments, we
recommend that you use config files or flag files, as they can be stored
in source control, making builds more reproducible.
</p>

  {/param}
{/call}

{/param}

{/call}
    {/param}  // content
  {/call} // buck.page
{/template}

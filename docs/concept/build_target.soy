{namespace buck.build_target}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Build Target' /}
    {param navid: 'concept_build_target' /}
    {param prettify: true /}
    {param description}
      A string that is used to identify a build rule in a project.
    {/param}
    {param content}

A <em>build target</em> is a string that is used to
identify a build rule in your project.

<p>
Here is an example of a fully-qualified build target:

<pre>&#x2F/java/com/facebook/share:ui</pre>

A fully-qualified build target has three components:

<ol>
  <li>The <code>&#x2F/</code> prefix indicates that this path is
      relative to the root of your project.
  <li>The <code>java/com/facebook/share</code> component between
      the <code>&#x2F/</code> prefix and the colon (<code>:</code>) indicates
      that the {call buck.build_file /} (typically named <code>BUCK</code>) is located 
      in the directory{sp} <code>java/com/facebook/share</code>.
  <li>The <code>ui</code> after the colon (<code>:</code>) indicates the name
      of the build rule within the build file.
      Build rule names must be unique within a build file.
</ol>

The full regular expression of a valid build target is as follows:
{literal}
<pre>
[A-Za-z0-9._-]*//[A-Za-z0-9/._-]*:[A-Za-z0-9_/.=,@~+-]+
|- cell name -|  | package path | |--- target name ---|
</pre>
{/literal}

A relative build target can be used to reference another build target within
the same <a href="build_file.html">build file</a>. A relative build target
starts with a colon (<code>:</code>) and is followed by only the third
component (or <em>short name</em>) of the fully-qualified build target. For example,
within <code>java/com/facebook/share/BUCK</code>, <code>:ui</code> can be
used to reference <code>&#x2F/java/com/facebook/share:ui</code>:

{literal}<pre class="prettyprint lang-py">
# This is in java/com/facebook/share/BUCK.
java_binary(
  name = 'ui_jar',
  deps = [
    # This would be the same as using:
    # <code>'&#x2F;/java/com/facebook/share:ui'</code>
    ':ui',
  ],
)
</pre>{/literal}

Build targets are frequently used as arguments to build rules and to
the command-line interface for Buck.

<h2>Command-line Pro Tips</h2>

<p>
Here are some ways that you can reduce your typing 
when you specify build targets as command-line arguments to the {call buck.cmd_build /} command. 

</p>

<p>
Consider the following example of a fully-qualified build target used
with the <code>buck build</code> command:
</p>

<pre>buck build &#x2F;/java/com/facebook/share:share</pre>

<p>
Although Buck is always strict when parsing build targets in build
files, Buck is flexible when parsing build targets on the command-line. 
Specifically, the leading <code>//</code> is optional on the command line, so the above could be:
</p>

<pre>buck build java/com/facebook/share:share</pre>

<p>
Also, if there is a forward slash before the colon, it is ignored, so this could also be written as:
</p>

<pre>buck build java/com/facebook/share/:share</pre>

<p>
which enables you to produce the red text shown below using
tab-completion, which dramatically reduces how much you need to type:
</p>

<pre>buck build <span class="com">java/com/facebook/share/</span>:share</pre>

<p>
Finally, if the final path element matches the value specified after the colon, it can be omitted:
</p>

<pre>
<span class="com"># This is treated as &#x2F;/java/com/facebook/share:share.</span><br>
buck build java/com/facebook/share/
</pre>

<p>
which makes the build target even easier to tab-complete! For this reason, the name of the build rule for the
primary deliverable in a build file is often named the same as the parent directory. 
That way, it can be built from the command-line with less typing.
</p>

<h2>See also</h2>

{call buck.build_target_pattern /} 

    {/param}
  {/call}
{/template}

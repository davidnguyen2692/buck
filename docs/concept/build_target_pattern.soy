{namespace buck.buildtargetpattern}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Build Target Pattern' /}
    {param navid: 'concept_build_target_pattern' /}
    {param description}
      A string that describes a set of one or more build targets.
    {/param}
    {param content}

<p>
A <em>build target pattern</em> is a string that describes a set of one or
more {call buck.build_target /}s. Build target patterns are used as 
command-line arguments to {call buck.cmd_build /}, to {call buck.cmd_query /}, 
and in the lists of values provided to the {sp}<code>visibility</code> argument 
of your build rules.
</p>

<p>
The simplest build target pattern matches the build target of same name:
</p>

{literal}<pre>
# Matches '//apps/myapp:app'.
'//apps/myapp:app'
{/literal}</pre>

<p>
A build target pattern that ends with a colon matches any build
targets that identify rules in the same build file:
</p>

{literal}<pre>
# Matches '//apps/myapp:app_debug' and '//apps/myapp:app_release'.
'//apps/myapp:'
{/literal}</pre>

<p>
A build target pattern that ends with <code>/...</code> matches any
build target in the build file in the current directory and any build
targets in build files in subdirectories: 
</p>

{literal}<pre>
# Matches '//apps:common' and '//apps/myapp:app'.
'//apps/...'
{/literal}</pre>

<p>
Note that build target patterns cannot be used with 
the <code>deps</code> argument to a build rule. Buck requires that you 
specify all dependencies explicitly as either fully-qualified or relative
build targets. By making dependencies explicit, Buck prevents a build
rule from inadvertently acquiring new dependencies; dependencies entail
processing cost, so you should avoid including extraneous dependencies
in your build rules.  
</p>

    {/param}
  {/call}
{/template}


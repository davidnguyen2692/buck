{namespace buck.skylark}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Skylark' /}
    {param navid: 'concept_skylark' /}
    {param description}
      An overview of the Skylark language and its usage.
    {/param}
    {param content}
      <h2>A bit of history</h2>
      <p>
        Historically, Buck relied on Python for describing {call buck.build_file /}s and {call buck.macros/}.
        This allowed Buck users to implement many missing features without having
        to modify Buck's core. While it worked fine for local builds and small repositories, when used
        at scale, the ability to access host environment and perform arbitrary actions without Buck's
        knowledge led to non-deterministic, hard to debug issues and slow parsing.
      </p>
      <p>
        To address some of these issues, Buck introduced features like <code>allow_unsafe_import</code>, but
        we were ultimately unable to provide proper sandboxing for deterministic parsing and a new
        solution had to be put in place.
      </p>

      <h2>Present day</h2>
      <p>
        In order to tackle Python DSL parser limitations, Buck added polyglot language support
        and provided a built-in parser, <a href="https://docs.bazel.build/versions/master/skylark/language.html">Skylark</a>, as
        an alternative to the Python DSL parser.
      </p>

      <h2>Enabling Skylark parser</h2>
      <p>
        In order to enable Skylark support for your project, please add
        {literal}<pre>
[parser]
  polyglot_parsing_enabled = true
  default_build_file_syntax = SKYLARK
</pre>{/literal} to your <code>.buckconfig</code> file. This is recommended for new projects and
      will become the default in the future. If most of your {call buck.build_file/}s or {call buck.macros/} rely
      on Python DSL features and you're not ready to invest into migrating to Skylark, you can
      replace <pre>default_build_file_syntax = SKYLARK</pre> with
      <pre>default_build_file_syntax = PYTHON_DSL</pre> to use Python DSL parser by default.

      Since Skylark will soon be the default, it's highly recommended to start the migration. To
      make it easier, Buck gives you control over which parser to use for parsing
      individual {call buck.build_file/}s. Adding
      <pre># BUILD FILE SYNTAX: SKYLARK</pre> as the very first line of the {call buck.build_file/} will
      result in Buck using Skylark parser for parsing it. Similarly, <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> will
      result in Python DSL parser being used.
      </p>

      <p>
        It's best to enable the Skylark parser globally and add
        <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> to all {call buck.build_file/}s that rely on Python
        DSL features.
      </p>

      <p>
        <b>Note</b> that all of the options above require enabled polyglot parsing:
        {literal}<pre>
[parser]
  polyglot_parsing_enabled = true
</pre>{/literal}
      </p>

      <h2>Migrating from Python to Skylark</h2>
      <p>
        The <a href="https://docs.bazel.build/versions/master/skylark/language.html">Skylark</a> language
        was specifically created to address all of the above and many other issues, which is why
        Buck team has decided to replace Python DSL with Skylark as the language for {call buck.build_file/} and
        extension files. Unfortunately, migration cannot be fully automated, so below some of the
        ways to resolve common tasks when migrating to Skylark are described.

        <h3>include_defs</h3>

        The <code>include_defs</code> function is not supported in Skylark because it
        pollutes the execution environment by default and makes automated refactoring much harder. To replace a
        usage of <pre>include_defs("//tools/my_macro.bzl")</pre> you should:
        <ul>
        <li>find all symbols defined in <code>my_macro</code> file that are actually used by this
          file. Say, for example, it needs <code>foo</code> and <code>bar</code>.
        <li>replace <code>include_defs</code> invocation with an equivalent {call buck.fn_load /}
          function invocation explicitly importing the needed symbols:
          <pre>load("//tools:my_macro.bzl", "foo", "bar")</pre>
        </ul>

        <b>Note</b> that {call buck.fn_load/} function uses the {call buck.build_target_pattern /} syntax
        as if there is an <pre>export_file(name="my_macro.bzl")</pre> defined in
        a <code>tools</code> package {call buck.build_file/}. This means that instead
        of <code>//package/extension.bzl</code> syntax expected by {call buck.fn_include_defs/}, a
        similar {call buck.fn_load/} invocation would expect <code>//package:extension.bzl</code>.
      </p>
      <h3>Environment variables</h3>
      <p>
        Environment variables are implicit and frequently result in non-reproducible builds because
        of environment variable differences across machines. They must be replaced with corresponding
        configuration variables. For example, instead of <pre>my_var = py_sdk.os.env.get('MY_VAR', 'foo')</pre>
        you should use <pre>my_var = read_config('my_project', 'my_var', 'foo')</pre>
        in your {call buck.build_file/} or extension file. When calling buck, instead of passing
        <pre>env MY_VAR='some_value' buck ...</pre>
        you should pass a configuration flag
        <pre>buck ... -c my_project.my_var=foo</pre>

        <p>
        <b>Note</b> that while using Python DSL
        parser it's possible to invoke {call buck.fn_read_config/} function during extension file
        evaluation directly or through a set of other function invocations, this
        behavior is not supported with Skylark parser in order to track configuration option usage more precisely.
        Because of this, a top-level {call buck.fn_read_config/} function invocation like
        <pre>foo = read_config(...)</pre>
        would either have to be performed in {call buck.build_file/} directly or, preferably, moved
        into a well-named function within an extension file. In case configuration options are used
        to instantiate expensive objects which should be created only once, consider
        replacing code like
        <pre>FOO = expensive1() if read_config(...) else expensive2()</pre> with something like
        {literal}<pre>
_EXPENSIVE1 = expensive1()
_EXPENSIVE2 = expensive2()

def foo():
  return _EXPENSIVE1 if read_config(...) else _EXPENSIVE2
</pre>{/literal} While it can result in instantiation of an unnecessary expensive object, it may
        still be more efficient than instantiating one of the expensive objects during
        each <code>foo</code> invocation. Having said that, please start simple and optimize only if
        performance overhead becomes noticeable.
        </p>
      </p>
      <h3>instanceof</h3>
      <p>
        The <code>instanceof</code> operator is not available in Skylark because it does not support
        inheritance, but some of its usages can be replaced with the <code>type</code> operator.
        For example,

        <pre>
        foo instanceof str
        </pre>

        can be replaced with

        <pre>
        type(foo) == type('')
        </pre>
      </p>

      <h3>get_base_path</h3>
      <p>
        The {call buck.fn_get_base_path /} function is replaced with the equivalent, but more appropriately
        named <a href="https://docs.bazel.build/versions/master/skylark/lib/native.html#package_name">package_name()</a>.
        Note, that while in {call buck.build_file /}s it's invoked
        as <code>package_name()</code>, it's invoked as <code>native.package_name()</code>
        in extension files, as are the rest of built-in functions provided by Buck.
        It's fairly easy to write an alias if there is a strong desire to use the old name instead.
      </p>

      <h3>del</h3>
      <p>
        Usage of <code>del arr[1]</code> and <code>del dictionary['key']</code> is not supported.
        Use <code>arr.pop(1)</code> and <code>dictionary.pop('key')</code> instead respectively.
      </p>

      <h3>class</h3>
      <p>
        Classes are not supported.
        You can replace them with <code>struct</code>s and functions. In addition to language
        simplification, structs are
        more <a href="http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html">memory efficient</a>.
        For example, a class like

        {literal}<pre>
class Foo:
def __init__(self, foo, bar=None):
...
def some_method(self, param):
...
...
foo = Foo('foo', bar='yo')
res = foo.some_method(some_param)</pre>{/literal}

        can be replaced with something like

        {literal}<pre>
def some_function(foo_instance, param):
...
foo = struct(foo='foo', bar='yo')
res = some_function(foo, some_param)
{/literal}</pre>

        You can also track state in variables defined in the same extension file, but you cannot
        expose any mutators, since all variables are frozen once extension file is evaluated.
        This is intentional and prevents race conditions, since build files as well as extension
        files must support efficient parallel evaluation. You can also use <code>provider</code>s
        in order to create named <code>struct</code> factories.

        {literal}<pre>
def some_function(foo_instance, param):
...
Foo = provider()
foo = Foo(foo='foo', bar='yo')
res = some_function(foo, some_param)
</pre>{/literal}
      </p>
      <h3>import re</h3>
      <p>
        Regular expressions are not supported in Skylark due to unbounded runtime and resource
        usage, but their usage is often unnecessary and can be replaced with simple
        string manipulations.
        Patterns like {literal}re"//libraries/my_lib/.*"{/literal} can be replaced with
        a {literal}startswith("//libraries/my_lib/"){/literal}.
        Similarly, the <code>endswith()</code> method can be used to replace a pattern that starts
        with <code>.*</code> and <code>"some_text" in foo</code> can replace <code>re".*some_text.*"</code>.
      </p>

      <h3>raise Exception</h3>
      <p>
        Raising and catching exceptions is not supported.
        Use the <a href="https://docs.bazel.build/versions/master/skylark/lib/globals.html#fail">fail function</a> instead.
        For example, instead of <code>raise Exception("foo")</code> or <code>raise Exception("attribute_name: foo")</code> you
        can use <code>fail("foo")</code> or <code>fail("foo", "attribute_name")</code> respectively
        to stop build/exception file evaluation and report an error.
        Since usage of <code>fail</code> triggers non-recoverable errors and halts parsing, it
        cannot be used for control flow.
      </p>

      <h3>while loop</h3>
      <p>
        While loops are not supported due to unbounded runtime. Instead, use a <code>for</code> loop
        with a bounded range.
        Usage of <code>while True: ...</code> should be replaced with
        a <code>for _ in range(REASONABLE_LIMIT):</code> followed by an extra check after the loop
        to make sure that loop has terminated before all iterations were exhausted.
      </p>
      <h3>python module</h3>
      <p>
        Python modules cannot be imported in Skylark. Many safe Python functions
        like <code>os.path.basepath</code> or <code>os.path.join</code> can be replaced
        with <code>paths.basename</code> and <code>paths.join</code> from <a href="https://github.com/bazelbuild/bazel-skylib">Skylib</a>.
        In order to use it, clone it into some directory, configure it as a cell by
        adding {literal}<pre>
[repositories]
  bazel_skylib = path/to/skylib_checkout
</pre>{/literal} to a <code>.buckconfig</code> file, and load corresponding function
        <pre>load("@bazel_skylib//lib:paths.bzl", "paths")</pre>.

        An example from Skylib website:

        {literal}<pre>
load("@bazel_skylib//:lib.bzl", "paths", "shell")

p = paths.basename("foo.bar")
s = shell.quote(p)
</pre>{/literal}

        <h3>Skylint</h3>
        Consider using <a href="https://github.com/bazelbuild/bazel/blob/master/site/docs/skylark/skylint.md">Skylint</a> lint
        tool which can catch and suggest fixes for some of the common issues. Unfortunately, since
        it was not designed to handle arbitrary Python files, it can crash.
        Some of the common reasons for it to crash are:

        <ul>
        <li>usage of nested functions. Nested functions should be moved to the top level.
        <li>usage of <code>not foo in</code> instead of <code>foo not in</code>. Use <code>foo not in</code> instead - it's recommended by flake8 anyways.
        </ul>

        You can bisect affected area of code by commenting out parts of the file and rerunning Skylint.

        <h3>Testing your changes</h3>
        <h4>Automated testing</h4>
        <p>Comming soon...</p>

        <h4>Manual testing</h4>
        The easiest way to check if your changes affected build rules is by checking if target rule
        keys have changed. You can capture rule keys before making your change using

        <pre>
        buck targets --show-rulekey //path/to/targets/... > before
        </pre>

        followed by the command below after applying your changes

        <pre>
        buck targets --show-rulekey //path/to/targets/... > after
        </pre>

        Now that before and after rule keys are captured

        <pre>
        diff before after
        </pre>

        should be empty unless your changes affected semantics of some macros or build definitions.
        In order to get more insight into what exactly has you, changed can use <pre>buck audit rules path/to/BUCK</pre> command
        on individual {call buck.build_file /} files to see how macros are expanded by Buck.
      </p>
    {/param}
  {/call}
{/template}

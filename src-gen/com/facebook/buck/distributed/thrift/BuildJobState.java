/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class BuildJobState implements org.apache.thrift.TBase<BuildJobState, BuildJobState._Fields>, java.io.Serializable, Cloneable, Comparable<BuildJobState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildJobState");

  private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_HASHES_FIELD_DESC = new org.apache.thrift.protocol.TField("fileHashes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_GRAPH_FIELD_DESC = new org.apache.thrift.protocol.TField("targetGraph", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TOP_LEVEL_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("topLevelTargets", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuildJobStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuildJobStateTupleSchemeFactory();

  public java.util.Map<java.lang.Integer,BuildJobStateCell> cells; // optional
  public java.util.List<BuildJobStateFileHashes> fileHashes; // optional
  public BuildJobStateTargetGraph targetGraph; // optional
  public java.util.List<java.lang.String> topLevelTargets; // optional
  /**
   * 
   * @see RemoteCommand
   */
  public RemoteCommand command; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CELLS((short)1, "cells"),
    FILE_HASHES((short)2, "fileHashes"),
    TARGET_GRAPH((short)3, "targetGraph"),
    TOP_LEVEL_TARGETS((short)4, "topLevelTargets"),
    /**
     * 
     * @see RemoteCommand
     */
    COMMAND((short)5, "command");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CELLS
          return CELLS;
        case 2: // FILE_HASHES
          return FILE_HASHES;
        case 3: // TARGET_GRAPH
          return TARGET_GRAPH;
        case 4: // TOP_LEVEL_TARGETS
          return TOP_LEVEL_TARGETS;
        case 5: // COMMAND
          return COMMAND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CELLS,_Fields.FILE_HASHES,_Fields.TARGET_GRAPH,_Fields.TOP_LEVEL_TARGETS,_Fields.COMMAND};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildJobStateCell.class))));
    tmpMap.put(_Fields.FILE_HASHES, new org.apache.thrift.meta_data.FieldMetaData("fileHashes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildJobStateFileHashes.class))));
    tmpMap.put(_Fields.TARGET_GRAPH, new org.apache.thrift.meta_data.FieldMetaData("targetGraph", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildJobStateTargetGraph.class)));
    tmpMap.put(_Fields.TOP_LEVEL_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("topLevelTargets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RemoteCommand.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildJobState.class, metaDataMap);
  }

  public BuildJobState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuildJobState(BuildJobState other) {
    if (other.isSetCells()) {
      java.util.Map<java.lang.Integer,BuildJobStateCell> __this__cells = new java.util.HashMap<java.lang.Integer,BuildJobStateCell>(other.cells.size());
      for (java.util.Map.Entry<java.lang.Integer, BuildJobStateCell> other_element : other.cells.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        BuildJobStateCell other_element_value = other_element.getValue();

        java.lang.Integer __this__cells_copy_key = other_element_key;

        BuildJobStateCell __this__cells_copy_value = new BuildJobStateCell(other_element_value);

        __this__cells.put(__this__cells_copy_key, __this__cells_copy_value);
      }
      this.cells = __this__cells;
    }
    if (other.isSetFileHashes()) {
      java.util.List<BuildJobStateFileHashes> __this__fileHashes = new java.util.ArrayList<BuildJobStateFileHashes>(other.fileHashes.size());
      for (BuildJobStateFileHashes other_element : other.fileHashes) {
        __this__fileHashes.add(new BuildJobStateFileHashes(other_element));
      }
      this.fileHashes = __this__fileHashes;
    }
    if (other.isSetTargetGraph()) {
      this.targetGraph = new BuildJobStateTargetGraph(other.targetGraph);
    }
    if (other.isSetTopLevelTargets()) {
      java.util.List<java.lang.String> __this__topLevelTargets = new java.util.ArrayList<java.lang.String>(other.topLevelTargets);
      this.topLevelTargets = __this__topLevelTargets;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
  }

  public BuildJobState deepCopy() {
    return new BuildJobState(this);
  }

  @Override
  public void clear() {
    this.cells = null;
    this.fileHashes = null;
    this.targetGraph = null;
    this.topLevelTargets = null;
    this.command = null;
  }

  public int getCellsSize() {
    return (this.cells == null) ? 0 : this.cells.size();
  }

  public void putToCells(int key, BuildJobStateCell val) {
    if (this.cells == null) {
      this.cells = new java.util.HashMap<java.lang.Integer,BuildJobStateCell>();
    }
    this.cells.put(key, val);
  }

  public java.util.Map<java.lang.Integer,BuildJobStateCell> getCells() {
    return this.cells;
  }

  public BuildJobState setCells(java.util.Map<java.lang.Integer,BuildJobStateCell> cells) {
    this.cells = cells;
    return this;
  }

  public void unsetCells() {
    this.cells = null;
  }

  /** Returns true if field cells is set (has been assigned a value) and false otherwise */
  public boolean isSetCells() {
    return this.cells != null;
  }

  public void setCellsIsSet(boolean value) {
    if (!value) {
      this.cells = null;
    }
  }

  public int getFileHashesSize() {
    return (this.fileHashes == null) ? 0 : this.fileHashes.size();
  }

  public java.util.Iterator<BuildJobStateFileHashes> getFileHashesIterator() {
    return (this.fileHashes == null) ? null : this.fileHashes.iterator();
  }

  public void addToFileHashes(BuildJobStateFileHashes elem) {
    if (this.fileHashes == null) {
      this.fileHashes = new java.util.ArrayList<BuildJobStateFileHashes>();
    }
    this.fileHashes.add(elem);
  }

  public java.util.List<BuildJobStateFileHashes> getFileHashes() {
    return this.fileHashes;
  }

  public BuildJobState setFileHashes(java.util.List<BuildJobStateFileHashes> fileHashes) {
    this.fileHashes = fileHashes;
    return this;
  }

  public void unsetFileHashes() {
    this.fileHashes = null;
  }

  /** Returns true if field fileHashes is set (has been assigned a value) and false otherwise */
  public boolean isSetFileHashes() {
    return this.fileHashes != null;
  }

  public void setFileHashesIsSet(boolean value) {
    if (!value) {
      this.fileHashes = null;
    }
  }

  public BuildJobStateTargetGraph getTargetGraph() {
    return this.targetGraph;
  }

  public BuildJobState setTargetGraph(BuildJobStateTargetGraph targetGraph) {
    this.targetGraph = targetGraph;
    return this;
  }

  public void unsetTargetGraph() {
    this.targetGraph = null;
  }

  /** Returns true if field targetGraph is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetGraph() {
    return this.targetGraph != null;
  }

  public void setTargetGraphIsSet(boolean value) {
    if (!value) {
      this.targetGraph = null;
    }
  }

  public int getTopLevelTargetsSize() {
    return (this.topLevelTargets == null) ? 0 : this.topLevelTargets.size();
  }

  public java.util.Iterator<java.lang.String> getTopLevelTargetsIterator() {
    return (this.topLevelTargets == null) ? null : this.topLevelTargets.iterator();
  }

  public void addToTopLevelTargets(java.lang.String elem) {
    if (this.topLevelTargets == null) {
      this.topLevelTargets = new java.util.ArrayList<java.lang.String>();
    }
    this.topLevelTargets.add(elem);
  }

  public java.util.List<java.lang.String> getTopLevelTargets() {
    return this.topLevelTargets;
  }

  public BuildJobState setTopLevelTargets(java.util.List<java.lang.String> topLevelTargets) {
    this.topLevelTargets = topLevelTargets;
    return this;
  }

  public void unsetTopLevelTargets() {
    this.topLevelTargets = null;
  }

  /** Returns true if field topLevelTargets is set (has been assigned a value) and false otherwise */
  public boolean isSetTopLevelTargets() {
    return this.topLevelTargets != null;
  }

  public void setTopLevelTargetsIsSet(boolean value) {
    if (!value) {
      this.topLevelTargets = null;
    }
  }

  /**
   * 
   * @see RemoteCommand
   */
  public RemoteCommand getCommand() {
    return this.command;
  }

  /**
   * 
   * @see RemoteCommand
   */
  public BuildJobState setCommand(RemoteCommand command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CELLS:
      if (value == null) {
        unsetCells();
      } else {
        setCells((java.util.Map<java.lang.Integer,BuildJobStateCell>)value);
      }
      break;

    case FILE_HASHES:
      if (value == null) {
        unsetFileHashes();
      } else {
        setFileHashes((java.util.List<BuildJobStateFileHashes>)value);
      }
      break;

    case TARGET_GRAPH:
      if (value == null) {
        unsetTargetGraph();
      } else {
        setTargetGraph((BuildJobStateTargetGraph)value);
      }
      break;

    case TOP_LEVEL_TARGETS:
      if (value == null) {
        unsetTopLevelTargets();
      } else {
        setTopLevelTargets((java.util.List<java.lang.String>)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((RemoteCommand)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CELLS:
      return getCells();

    case FILE_HASHES:
      return getFileHashes();

    case TARGET_GRAPH:
      return getTargetGraph();

    case TOP_LEVEL_TARGETS:
      return getTopLevelTargets();

    case COMMAND:
      return getCommand();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CELLS:
      return isSetCells();
    case FILE_HASHES:
      return isSetFileHashes();
    case TARGET_GRAPH:
      return isSetTargetGraph();
    case TOP_LEVEL_TARGETS:
      return isSetTopLevelTargets();
    case COMMAND:
      return isSetCommand();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuildJobState)
      return this.equals((BuildJobState)that);
    return false;
  }

  public boolean equals(BuildJobState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cells = true && this.isSetCells();
    boolean that_present_cells = true && that.isSetCells();
    if (this_present_cells || that_present_cells) {
      if (!(this_present_cells && that_present_cells))
        return false;
      if (!this.cells.equals(that.cells))
        return false;
    }

    boolean this_present_fileHashes = true && this.isSetFileHashes();
    boolean that_present_fileHashes = true && that.isSetFileHashes();
    if (this_present_fileHashes || that_present_fileHashes) {
      if (!(this_present_fileHashes && that_present_fileHashes))
        return false;
      if (!this.fileHashes.equals(that.fileHashes))
        return false;
    }

    boolean this_present_targetGraph = true && this.isSetTargetGraph();
    boolean that_present_targetGraph = true && that.isSetTargetGraph();
    if (this_present_targetGraph || that_present_targetGraph) {
      if (!(this_present_targetGraph && that_present_targetGraph))
        return false;
      if (!this.targetGraph.equals(that.targetGraph))
        return false;
    }

    boolean this_present_topLevelTargets = true && this.isSetTopLevelTargets();
    boolean that_present_topLevelTargets = true && that.isSetTopLevelTargets();
    if (this_present_topLevelTargets || that_present_topLevelTargets) {
      if (!(this_present_topLevelTargets && that_present_topLevelTargets))
        return false;
      if (!this.topLevelTargets.equals(that.topLevelTargets))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCells()) ? 131071 : 524287);
    if (isSetCells())
      hashCode = hashCode * 8191 + cells.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileHashes()) ? 131071 : 524287);
    if (isSetFileHashes())
      hashCode = hashCode * 8191 + fileHashes.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargetGraph()) ? 131071 : 524287);
    if (isSetTargetGraph())
      hashCode = hashCode * 8191 + targetGraph.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopLevelTargets()) ? 131071 : 524287);
    if (isSetTopLevelTargets())
      hashCode = hashCode * 8191 + topLevelTargets.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
    if (isSetCommand())
      hashCode = hashCode * 8191 + command.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(BuildJobState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCells()).compareTo(other.isSetCells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, other.cells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFileHashes()).compareTo(other.isSetFileHashes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileHashes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileHashes, other.fileHashes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargetGraph()).compareTo(other.isSetTargetGraph());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetGraph()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetGraph, other.targetGraph);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopLevelTargets()).compareTo(other.isSetTopLevelTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopLevelTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topLevelTargets, other.topLevelTargets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuildJobState(");
    boolean first = true;

    if (isSetCells()) {
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
    }
    if (isSetFileHashes()) {
      if (!first) sb.append(", ");
      sb.append("fileHashes:");
      if (this.fileHashes == null) {
        sb.append("null");
      } else {
        sb.append(this.fileHashes);
      }
      first = false;
    }
    if (isSetTargetGraph()) {
      if (!first) sb.append(", ");
      sb.append("targetGraph:");
      if (this.targetGraph == null) {
        sb.append("null");
      } else {
        sb.append(this.targetGraph);
      }
      first = false;
    }
    if (isSetTopLevelTargets()) {
      if (!first) sb.append(", ");
      sb.append("topLevelTargets:");
      if (this.topLevelTargets == null) {
        sb.append("null");
      } else {
        sb.append(this.topLevelTargets);
      }
      first = false;
    }
    if (isSetCommand()) {
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (targetGraph != null) {
      targetGraph.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuildJobStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildJobStateStandardScheme getScheme() {
      return new BuildJobStateStandardScheme();
    }
  }

  private static class BuildJobStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildJobState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildJobState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.cells = new java.util.HashMap<java.lang.Integer,BuildJobStateCell>(2*_map60.size);
                int _key61;
                BuildJobStateCell _val62;
                for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                {
                  _key61 = iprot.readI32();
                  _val62 = new BuildJobStateCell();
                  _val62.read(iprot);
                  struct.cells.put(_key61, _val62);
                }
                iprot.readMapEnd();
              }
              struct.setCellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_HASHES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.fileHashes = new java.util.ArrayList<BuildJobStateFileHashes>(_list64.size);
                BuildJobStateFileHashes _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new BuildJobStateFileHashes();
                  _elem65.read(iprot);
                  struct.fileHashes.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setFileHashesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_GRAPH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.targetGraph = new BuildJobStateTargetGraph();
              struct.targetGraph.read(iprot);
              struct.setTargetGraphIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOP_LEVEL_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.topLevelTargets = new java.util.ArrayList<java.lang.String>(_list67.size);
                java.lang.String _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = iprot.readString();
                  struct.topLevelTargets.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setTopLevelTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.command = com.facebook.buck.distributed.thrift.RemoteCommand.findByValue(iprot.readI32());
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildJobState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cells != null) {
        if (struct.isSetCells()) {
          oprot.writeFieldBegin(CELLS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.cells.size()));
            for (java.util.Map.Entry<java.lang.Integer, BuildJobStateCell> _iter70 : struct.cells.entrySet())
            {
              oprot.writeI32(_iter70.getKey());
              _iter70.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileHashes != null) {
        if (struct.isSetFileHashes()) {
          oprot.writeFieldBegin(FILE_HASHES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fileHashes.size()));
            for (BuildJobStateFileHashes _iter71 : struct.fileHashes)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetGraph != null) {
        if (struct.isSetTargetGraph()) {
          oprot.writeFieldBegin(TARGET_GRAPH_FIELD_DESC);
          struct.targetGraph.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topLevelTargets != null) {
        if (struct.isSetTopLevelTargets()) {
          oprot.writeFieldBegin(TOP_LEVEL_TARGETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topLevelTargets.size()));
            for (java.lang.String _iter72 : struct.topLevelTargets)
            {
              oprot.writeString(_iter72);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.command != null) {
        if (struct.isSetCommand()) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeI32(struct.command.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuildJobStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildJobStateTupleScheme getScheme() {
      return new BuildJobStateTupleScheme();
    }
  }

  private static class BuildJobStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuildJobState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuildJobState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCells()) {
        optionals.set(0);
      }
      if (struct.isSetFileHashes()) {
        optionals.set(1);
      }
      if (struct.isSetTargetGraph()) {
        optionals.set(2);
      }
      if (struct.isSetTopLevelTargets()) {
        optionals.set(3);
      }
      if (struct.isSetCommand()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCells()) {
        {
          oprot.writeI32(struct.cells.size());
          for (java.util.Map.Entry<java.lang.Integer, BuildJobStateCell> _iter73 : struct.cells.entrySet())
          {
            oprot.writeI32(_iter73.getKey());
            _iter73.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetFileHashes()) {
        {
          oprot.writeI32(struct.fileHashes.size());
          for (BuildJobStateFileHashes _iter74 : struct.fileHashes)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetTargetGraph()) {
        struct.targetGraph.write(oprot);
      }
      if (struct.isSetTopLevelTargets()) {
        {
          oprot.writeI32(struct.topLevelTargets.size());
          for (java.lang.String _iter75 : struct.topLevelTargets)
          {
            oprot.writeString(_iter75);
          }
        }
      }
      if (struct.isSetCommand()) {
        oprot.writeI32(struct.command.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuildJobState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cells = new java.util.HashMap<java.lang.Integer,BuildJobStateCell>(2*_map76.size);
          int _key77;
          BuildJobStateCell _val78;
          for (int _i79 = 0; _i79 < _map76.size; ++_i79)
          {
            _key77 = iprot.readI32();
            _val78 = new BuildJobStateCell();
            _val78.read(iprot);
            struct.cells.put(_key77, _val78);
          }
        }
        struct.setCellsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fileHashes = new java.util.ArrayList<BuildJobStateFileHashes>(_list80.size);
          BuildJobStateFileHashes _elem81;
          for (int _i82 = 0; _i82 < _list80.size; ++_i82)
          {
            _elem81 = new BuildJobStateFileHashes();
            _elem81.read(iprot);
            struct.fileHashes.add(_elem81);
          }
        }
        struct.setFileHashesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetGraph = new BuildJobStateTargetGraph();
        struct.targetGraph.read(iprot);
        struct.setTargetGraphIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topLevelTargets = new java.util.ArrayList<java.lang.String>(_list83.size);
          java.lang.String _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = iprot.readString();
            struct.topLevelTargets.add(_elem84);
          }
        }
        struct.setTopLevelTargetsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.command = com.facebook.buck.distributed.thrift.RemoteCommand.findByValue(iprot.readI32());
        struct.setCommandIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class BuildJobStateFileHashEntry implements org.apache.thrift.TBase<BuildJobStateFileHashEntry, BuildJobStateFileHashEntry._Fields>, java.io.Serializable, Cloneable, Comparable<BuildJobStateFileHashEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildJobStateFileHashEntry");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARCHIVE_MEMBER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveMemberPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHA1_FIELD_DESC = new org.apache.thrift.protocol.TField("sha1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("isDirectory", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PATH_IS_ABSOLUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("pathIsAbsolute", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROOT_SYM_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("rootSymLink", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ROOT_SYM_LINK_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("rootSymLinkTarget", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField IS_EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isExecutable", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField MATERIALIZE_DURING_PRELOADING_FIELD_DESC = new org.apache.thrift.protocol.TField("materializeDuringPreloading", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuildJobStateFileHashEntryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuildJobStateFileHashEntryTupleSchemeFactory();

  public PathWithUnixSeparators path; // optional
  public java.lang.String archiveMemberPath; // optional
  public java.lang.String sha1; // optional
  public boolean isDirectory; // optional
  public boolean pathIsAbsolute; // optional
  public java.nio.ByteBuffer contents; // optional
  public PathWithUnixSeparators rootSymLink; // optional
  public PathWithUnixSeparators rootSymLinkTarget; // optional
  public java.util.List<PathWithUnixSeparators> children; // optional
  public boolean isExecutable; // optional
  public boolean materializeDuringPreloading; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    ARCHIVE_MEMBER_PATH((short)2, "archiveMemberPath"),
    SHA1((short)3, "sha1"),
    IS_DIRECTORY((short)4, "isDirectory"),
    PATH_IS_ABSOLUTE((short)5, "pathIsAbsolute"),
    CONTENTS((short)6, "contents"),
    ROOT_SYM_LINK((short)7, "rootSymLink"),
    ROOT_SYM_LINK_TARGET((short)8, "rootSymLinkTarget"),
    CHILDREN((short)9, "children"),
    IS_EXECUTABLE((short)10, "isExecutable"),
    MATERIALIZE_DURING_PRELOADING((short)11, "materializeDuringPreloading");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // ARCHIVE_MEMBER_PATH
          return ARCHIVE_MEMBER_PATH;
        case 3: // SHA1
          return SHA1;
        case 4: // IS_DIRECTORY
          return IS_DIRECTORY;
        case 5: // PATH_IS_ABSOLUTE
          return PATH_IS_ABSOLUTE;
        case 6: // CONTENTS
          return CONTENTS;
        case 7: // ROOT_SYM_LINK
          return ROOT_SYM_LINK;
        case 8: // ROOT_SYM_LINK_TARGET
          return ROOT_SYM_LINK_TARGET;
        case 9: // CHILDREN
          return CHILDREN;
        case 10: // IS_EXECUTABLE
          return IS_EXECUTABLE;
        case 11: // MATERIALIZE_DURING_PRELOADING
          return MATERIALIZE_DURING_PRELOADING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISDIRECTORY_ISSET_ID = 0;
  private static final int __PATHISABSOLUTE_ISSET_ID = 1;
  private static final int __ISEXECUTABLE_ISSET_ID = 2;
  private static final int __MATERIALIZEDURINGPRELOADING_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PATH,_Fields.ARCHIVE_MEMBER_PATH,_Fields.SHA1,_Fields.IS_DIRECTORY,_Fields.PATH_IS_ABSOLUTE,_Fields.CONTENTS,_Fields.ROOT_SYM_LINK,_Fields.ROOT_SYM_LINK_TARGET,_Fields.CHILDREN,_Fields.IS_EXECUTABLE,_Fields.MATERIALIZE_DURING_PRELOADING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PathWithUnixSeparators.class)));
    tmpMap.put(_Fields.ARCHIVE_MEMBER_PATH, new org.apache.thrift.meta_data.FieldMetaData("archiveMemberPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHA1, new org.apache.thrift.meta_data.FieldMetaData("sha1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("isDirectory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATH_IS_ABSOLUTE, new org.apache.thrift.meta_data.FieldMetaData("pathIsAbsolute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ROOT_SYM_LINK, new org.apache.thrift.meta_data.FieldMetaData("rootSymLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PathWithUnixSeparators.class)));
    tmpMap.put(_Fields.ROOT_SYM_LINK_TARGET, new org.apache.thrift.meta_data.FieldMetaData("rootSymLinkTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PathWithUnixSeparators.class)));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PathWithUnixSeparators.class))));
    tmpMap.put(_Fields.IS_EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("isExecutable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MATERIALIZE_DURING_PRELOADING, new org.apache.thrift.meta_data.FieldMetaData("materializeDuringPreloading", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildJobStateFileHashEntry.class, metaDataMap);
  }

  public BuildJobStateFileHashEntry() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuildJobStateFileHashEntry(BuildJobStateFileHashEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = new PathWithUnixSeparators(other.path);
    }
    if (other.isSetArchiveMemberPath()) {
      this.archiveMemberPath = other.archiveMemberPath;
    }
    if (other.isSetSha1()) {
      this.sha1 = other.sha1;
    }
    this.isDirectory = other.isDirectory;
    this.pathIsAbsolute = other.pathIsAbsolute;
    if (other.isSetContents()) {
      this.contents = org.apache.thrift.TBaseHelper.copyBinary(other.contents);
    }
    if (other.isSetRootSymLink()) {
      this.rootSymLink = new PathWithUnixSeparators(other.rootSymLink);
    }
    if (other.isSetRootSymLinkTarget()) {
      this.rootSymLinkTarget = new PathWithUnixSeparators(other.rootSymLinkTarget);
    }
    if (other.isSetChildren()) {
      java.util.List<PathWithUnixSeparators> __this__children = new java.util.ArrayList<PathWithUnixSeparators>(other.children.size());
      for (PathWithUnixSeparators other_element : other.children) {
        __this__children.add(new PathWithUnixSeparators(other_element));
      }
      this.children = __this__children;
    }
    this.isExecutable = other.isExecutable;
    this.materializeDuringPreloading = other.materializeDuringPreloading;
  }

  public BuildJobStateFileHashEntry deepCopy() {
    return new BuildJobStateFileHashEntry(this);
  }

  @Override
  public void clear() {
    this.path = null;
    this.archiveMemberPath = null;
    this.sha1 = null;
    setIsDirectoryIsSet(false);
    this.isDirectory = false;
    setPathIsAbsoluteIsSet(false);
    this.pathIsAbsolute = false;
    this.contents = null;
    this.rootSymLink = null;
    this.rootSymLinkTarget = null;
    this.children = null;
    setIsExecutableIsSet(false);
    this.isExecutable = false;
    setMaterializeDuringPreloadingIsSet(false);
    this.materializeDuringPreloading = false;
  }

  public PathWithUnixSeparators getPath() {
    return this.path;
  }

  public BuildJobStateFileHashEntry setPath(PathWithUnixSeparators path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public java.lang.String getArchiveMemberPath() {
    return this.archiveMemberPath;
  }

  public BuildJobStateFileHashEntry setArchiveMemberPath(java.lang.String archiveMemberPath) {
    this.archiveMemberPath = archiveMemberPath;
    return this;
  }

  public void unsetArchiveMemberPath() {
    this.archiveMemberPath = null;
  }

  /** Returns true if field archiveMemberPath is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveMemberPath() {
    return this.archiveMemberPath != null;
  }

  public void setArchiveMemberPathIsSet(boolean value) {
    if (!value) {
      this.archiveMemberPath = null;
    }
  }

  public java.lang.String getSha1() {
    return this.sha1;
  }

  public BuildJobStateFileHashEntry setSha1(java.lang.String sha1) {
    this.sha1 = sha1;
    return this;
  }

  public void unsetSha1() {
    this.sha1 = null;
  }

  /** Returns true if field sha1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSha1() {
    return this.sha1 != null;
  }

  public void setSha1IsSet(boolean value) {
    if (!value) {
      this.sha1 = null;
    }
  }

  public boolean isIsDirectory() {
    return this.isDirectory;
  }

  public BuildJobStateFileHashEntry setIsDirectory(boolean isDirectory) {
    this.isDirectory = isDirectory;
    setIsDirectoryIsSet(true);
    return this;
  }

  public void unsetIsDirectory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDIRECTORY_ISSET_ID);
  }

  /** Returns true if field isDirectory is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDirectory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDIRECTORY_ISSET_ID);
  }

  public void setIsDirectoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDIRECTORY_ISSET_ID, value);
  }

  public boolean isPathIsAbsolute() {
    return this.pathIsAbsolute;
  }

  public BuildJobStateFileHashEntry setPathIsAbsolute(boolean pathIsAbsolute) {
    this.pathIsAbsolute = pathIsAbsolute;
    setPathIsAbsoluteIsSet(true);
    return this;
  }

  public void unsetPathIsAbsolute() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PATHISABSOLUTE_ISSET_ID);
  }

  /** Returns true if field pathIsAbsolute is set (has been assigned a value) and false otherwise */
  public boolean isSetPathIsAbsolute() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PATHISABSOLUTE_ISSET_ID);
  }

  public void setPathIsAbsoluteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PATHISABSOLUTE_ISSET_ID, value);
  }

  public byte[] getContents() {
    setContents(org.apache.thrift.TBaseHelper.rightSize(contents));
    return contents == null ? null : contents.array();
  }

  public java.nio.ByteBuffer bufferForContents() {
    return org.apache.thrift.TBaseHelper.copyBinary(contents);
  }

  public BuildJobStateFileHashEntry setContents(byte[] contents) {
    this.contents = contents == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contents.clone());
    return this;
  }

  public BuildJobStateFileHashEntry setContents(java.nio.ByteBuffer contents) {
    this.contents = org.apache.thrift.TBaseHelper.copyBinary(contents);
    return this;
  }

  public void unsetContents() {
    this.contents = null;
  }

  /** Returns true if field contents is set (has been assigned a value) and false otherwise */
  public boolean isSetContents() {
    return this.contents != null;
  }

  public void setContentsIsSet(boolean value) {
    if (!value) {
      this.contents = null;
    }
  }

  public PathWithUnixSeparators getRootSymLink() {
    return this.rootSymLink;
  }

  public BuildJobStateFileHashEntry setRootSymLink(PathWithUnixSeparators rootSymLink) {
    this.rootSymLink = rootSymLink;
    return this;
  }

  public void unsetRootSymLink() {
    this.rootSymLink = null;
  }

  /** Returns true if field rootSymLink is set (has been assigned a value) and false otherwise */
  public boolean isSetRootSymLink() {
    return this.rootSymLink != null;
  }

  public void setRootSymLinkIsSet(boolean value) {
    if (!value) {
      this.rootSymLink = null;
    }
  }

  public PathWithUnixSeparators getRootSymLinkTarget() {
    return this.rootSymLinkTarget;
  }

  public BuildJobStateFileHashEntry setRootSymLinkTarget(PathWithUnixSeparators rootSymLinkTarget) {
    this.rootSymLinkTarget = rootSymLinkTarget;
    return this;
  }

  public void unsetRootSymLinkTarget() {
    this.rootSymLinkTarget = null;
  }

  /** Returns true if field rootSymLinkTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetRootSymLinkTarget() {
    return this.rootSymLinkTarget != null;
  }

  public void setRootSymLinkTargetIsSet(boolean value) {
    if (!value) {
      this.rootSymLinkTarget = null;
    }
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  public java.util.Iterator<PathWithUnixSeparators> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(PathWithUnixSeparators elem) {
    if (this.children == null) {
      this.children = new java.util.ArrayList<PathWithUnixSeparators>();
    }
    this.children.add(elem);
  }

  public java.util.List<PathWithUnixSeparators> getChildren() {
    return this.children;
  }

  public BuildJobStateFileHashEntry setChildren(java.util.List<PathWithUnixSeparators> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  public boolean isIsExecutable() {
    return this.isExecutable;
  }

  public BuildJobStateFileHashEntry setIsExecutable(boolean isExecutable) {
    this.isExecutable = isExecutable;
    setIsExecutableIsSet(true);
    return this;
  }

  public void unsetIsExecutable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEXECUTABLE_ISSET_ID);
  }

  /** Returns true if field isExecutable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExecutable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEXECUTABLE_ISSET_ID);
  }

  public void setIsExecutableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEXECUTABLE_ISSET_ID, value);
  }

  public boolean isMaterializeDuringPreloading() {
    return this.materializeDuringPreloading;
  }

  public BuildJobStateFileHashEntry setMaterializeDuringPreloading(boolean materializeDuringPreloading) {
    this.materializeDuringPreloading = materializeDuringPreloading;
    setMaterializeDuringPreloadingIsSet(true);
    return this;
  }

  public void unsetMaterializeDuringPreloading() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MATERIALIZEDURINGPRELOADING_ISSET_ID);
  }

  /** Returns true if field materializeDuringPreloading is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterializeDuringPreloading() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MATERIALIZEDURINGPRELOADING_ISSET_ID);
  }

  public void setMaterializeDuringPreloadingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MATERIALIZEDURINGPRELOADING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((PathWithUnixSeparators)value);
      }
      break;

    case ARCHIVE_MEMBER_PATH:
      if (value == null) {
        unsetArchiveMemberPath();
      } else {
        setArchiveMemberPath((java.lang.String)value);
      }
      break;

    case SHA1:
      if (value == null) {
        unsetSha1();
      } else {
        setSha1((java.lang.String)value);
      }
      break;

    case IS_DIRECTORY:
      if (value == null) {
        unsetIsDirectory();
      } else {
        setIsDirectory((java.lang.Boolean)value);
      }
      break;

    case PATH_IS_ABSOLUTE:
      if (value == null) {
        unsetPathIsAbsolute();
      } else {
        setPathIsAbsolute((java.lang.Boolean)value);
      }
      break;

    case CONTENTS:
      if (value == null) {
        unsetContents();
      } else {
        if (value instanceof byte[]) {
          setContents((byte[])value);
        } else {
          setContents((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ROOT_SYM_LINK:
      if (value == null) {
        unsetRootSymLink();
      } else {
        setRootSymLink((PathWithUnixSeparators)value);
      }
      break;

    case ROOT_SYM_LINK_TARGET:
      if (value == null) {
        unsetRootSymLinkTarget();
      } else {
        setRootSymLinkTarget((PathWithUnixSeparators)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((java.util.List<PathWithUnixSeparators>)value);
      }
      break;

    case IS_EXECUTABLE:
      if (value == null) {
        unsetIsExecutable();
      } else {
        setIsExecutable((java.lang.Boolean)value);
      }
      break;

    case MATERIALIZE_DURING_PRELOADING:
      if (value == null) {
        unsetMaterializeDuringPreloading();
      } else {
        setMaterializeDuringPreloading((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case ARCHIVE_MEMBER_PATH:
      return getArchiveMemberPath();

    case SHA1:
      return getSha1();

    case IS_DIRECTORY:
      return isIsDirectory();

    case PATH_IS_ABSOLUTE:
      return isPathIsAbsolute();

    case CONTENTS:
      return getContents();

    case ROOT_SYM_LINK:
      return getRootSymLink();

    case ROOT_SYM_LINK_TARGET:
      return getRootSymLinkTarget();

    case CHILDREN:
      return getChildren();

    case IS_EXECUTABLE:
      return isIsExecutable();

    case MATERIALIZE_DURING_PRELOADING:
      return isMaterializeDuringPreloading();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case ARCHIVE_MEMBER_PATH:
      return isSetArchiveMemberPath();
    case SHA1:
      return isSetSha1();
    case IS_DIRECTORY:
      return isSetIsDirectory();
    case PATH_IS_ABSOLUTE:
      return isSetPathIsAbsolute();
    case CONTENTS:
      return isSetContents();
    case ROOT_SYM_LINK:
      return isSetRootSymLink();
    case ROOT_SYM_LINK_TARGET:
      return isSetRootSymLinkTarget();
    case CHILDREN:
      return isSetChildren();
    case IS_EXECUTABLE:
      return isSetIsExecutable();
    case MATERIALIZE_DURING_PRELOADING:
      return isSetMaterializeDuringPreloading();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuildJobStateFileHashEntry)
      return this.equals((BuildJobStateFileHashEntry)that);
    return false;
  }

  public boolean equals(BuildJobStateFileHashEntry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_archiveMemberPath = true && this.isSetArchiveMemberPath();
    boolean that_present_archiveMemberPath = true && that.isSetArchiveMemberPath();
    if (this_present_archiveMemberPath || that_present_archiveMemberPath) {
      if (!(this_present_archiveMemberPath && that_present_archiveMemberPath))
        return false;
      if (!this.archiveMemberPath.equals(that.archiveMemberPath))
        return false;
    }

    boolean this_present_sha1 = true && this.isSetSha1();
    boolean that_present_sha1 = true && that.isSetSha1();
    if (this_present_sha1 || that_present_sha1) {
      if (!(this_present_sha1 && that_present_sha1))
        return false;
      if (!this.sha1.equals(that.sha1))
        return false;
    }

    boolean this_present_isDirectory = true && this.isSetIsDirectory();
    boolean that_present_isDirectory = true && that.isSetIsDirectory();
    if (this_present_isDirectory || that_present_isDirectory) {
      if (!(this_present_isDirectory && that_present_isDirectory))
        return false;
      if (this.isDirectory != that.isDirectory)
        return false;
    }

    boolean this_present_pathIsAbsolute = true && this.isSetPathIsAbsolute();
    boolean that_present_pathIsAbsolute = true && that.isSetPathIsAbsolute();
    if (this_present_pathIsAbsolute || that_present_pathIsAbsolute) {
      if (!(this_present_pathIsAbsolute && that_present_pathIsAbsolute))
        return false;
      if (this.pathIsAbsolute != that.pathIsAbsolute)
        return false;
    }

    boolean this_present_contents = true && this.isSetContents();
    boolean that_present_contents = true && that.isSetContents();
    if (this_present_contents || that_present_contents) {
      if (!(this_present_contents && that_present_contents))
        return false;
      if (!this.contents.equals(that.contents))
        return false;
    }

    boolean this_present_rootSymLink = true && this.isSetRootSymLink();
    boolean that_present_rootSymLink = true && that.isSetRootSymLink();
    if (this_present_rootSymLink || that_present_rootSymLink) {
      if (!(this_present_rootSymLink && that_present_rootSymLink))
        return false;
      if (!this.rootSymLink.equals(that.rootSymLink))
        return false;
    }

    boolean this_present_rootSymLinkTarget = true && this.isSetRootSymLinkTarget();
    boolean that_present_rootSymLinkTarget = true && that.isSetRootSymLinkTarget();
    if (this_present_rootSymLinkTarget || that_present_rootSymLinkTarget) {
      if (!(this_present_rootSymLinkTarget && that_present_rootSymLinkTarget))
        return false;
      if (!this.rootSymLinkTarget.equals(that.rootSymLinkTarget))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    boolean this_present_isExecutable = true && this.isSetIsExecutable();
    boolean that_present_isExecutable = true && that.isSetIsExecutable();
    if (this_present_isExecutable || that_present_isExecutable) {
      if (!(this_present_isExecutable && that_present_isExecutable))
        return false;
      if (this.isExecutable != that.isExecutable)
        return false;
    }

    boolean this_present_materializeDuringPreloading = true && this.isSetMaterializeDuringPreloading();
    boolean that_present_materializeDuringPreloading = true && that.isSetMaterializeDuringPreloading();
    if (this_present_materializeDuringPreloading || that_present_materializeDuringPreloading) {
      if (!(this_present_materializeDuringPreloading && that_present_materializeDuringPreloading))
        return false;
      if (this.materializeDuringPreloading != that.materializeDuringPreloading)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchiveMemberPath()) ? 131071 : 524287);
    if (isSetArchiveMemberPath())
      hashCode = hashCode * 8191 + archiveMemberPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetSha1()) ? 131071 : 524287);
    if (isSetSha1())
      hashCode = hashCode * 8191 + sha1.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsDirectory()) ? 131071 : 524287);
    if (isSetIsDirectory())
      hashCode = hashCode * 8191 + ((isDirectory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPathIsAbsolute()) ? 131071 : 524287);
    if (isSetPathIsAbsolute())
      hashCode = hashCode * 8191 + ((pathIsAbsolute) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetContents()) ? 131071 : 524287);
    if (isSetContents())
      hashCode = hashCode * 8191 + contents.hashCode();

    hashCode = hashCode * 8191 + ((isSetRootSymLink()) ? 131071 : 524287);
    if (isSetRootSymLink())
      hashCode = hashCode * 8191 + rootSymLink.hashCode();

    hashCode = hashCode * 8191 + ((isSetRootSymLinkTarget()) ? 131071 : 524287);
    if (isSetRootSymLinkTarget())
      hashCode = hashCode * 8191 + rootSymLinkTarget.hashCode();

    hashCode = hashCode * 8191 + ((isSetChildren()) ? 131071 : 524287);
    if (isSetChildren())
      hashCode = hashCode * 8191 + children.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsExecutable()) ? 131071 : 524287);
    if (isSetIsExecutable())
      hashCode = hashCode * 8191 + ((isExecutable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMaterializeDuringPreloading()) ? 131071 : 524287);
    if (isSetMaterializeDuringPreloading())
      hashCode = hashCode * 8191 + ((materializeDuringPreloading) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(BuildJobStateFileHashEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArchiveMemberPath()).compareTo(other.isSetArchiveMemberPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveMemberPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveMemberPath, other.archiveMemberPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSha1()).compareTo(other.isSetSha1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSha1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sha1, other.sha1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDirectory()).compareTo(other.isSetIsDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDirectory, other.isDirectory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPathIsAbsolute()).compareTo(other.isSetPathIsAbsolute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPathIsAbsolute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathIsAbsolute, other.pathIsAbsolute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContents()).compareTo(other.isSetContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, other.contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRootSymLink()).compareTo(other.isSetRootSymLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootSymLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootSymLink, other.rootSymLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRootSymLinkTarget()).compareTo(other.isSetRootSymLinkTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootSymLinkTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootSymLinkTarget, other.rootSymLinkTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsExecutable()).compareTo(other.isSetIsExecutable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExecutable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExecutable, other.isExecutable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaterializeDuringPreloading()).compareTo(other.isSetMaterializeDuringPreloading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterializeDuringPreloading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materializeDuringPreloading, other.materializeDuringPreloading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuildJobStateFileHashEntry(");
    boolean first = true;

    if (isSetPath()) {
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetArchiveMemberPath()) {
      if (!first) sb.append(", ");
      sb.append("archiveMemberPath:");
      if (this.archiveMemberPath == null) {
        sb.append("null");
      } else {
        sb.append(this.archiveMemberPath);
      }
      first = false;
    }
    if (isSetSha1()) {
      if (!first) sb.append(", ");
      sb.append("sha1:");
      if (this.sha1 == null) {
        sb.append("null");
      } else {
        sb.append(this.sha1);
      }
      first = false;
    }
    if (isSetIsDirectory()) {
      if (!first) sb.append(", ");
      sb.append("isDirectory:");
      sb.append(this.isDirectory);
      first = false;
    }
    if (isSetPathIsAbsolute()) {
      if (!first) sb.append(", ");
      sb.append("pathIsAbsolute:");
      sb.append(this.pathIsAbsolute);
      first = false;
    }
    if (isSetContents()) {
      if (!first) sb.append(", ");
      sb.append("contents:");
      if (this.contents == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contents, sb);
      }
      first = false;
    }
    if (isSetRootSymLink()) {
      if (!first) sb.append(", ");
      sb.append("rootSymLink:");
      if (this.rootSymLink == null) {
        sb.append("null");
      } else {
        sb.append(this.rootSymLink);
      }
      first = false;
    }
    if (isSetRootSymLinkTarget()) {
      if (!first) sb.append(", ");
      sb.append("rootSymLinkTarget:");
      if (this.rootSymLinkTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.rootSymLinkTarget);
      }
      first = false;
    }
    if (isSetChildren()) {
      if (!first) sb.append(", ");
      sb.append("children:");
      if (this.children == null) {
        sb.append("null");
      } else {
        sb.append(this.children);
      }
      first = false;
    }
    if (isSetIsExecutable()) {
      if (!first) sb.append(", ");
      sb.append("isExecutable:");
      sb.append(this.isExecutable);
      first = false;
    }
    if (isSetMaterializeDuringPreloading()) {
      if (!first) sb.append(", ");
      sb.append("materializeDuringPreloading:");
      sb.append(this.materializeDuringPreloading);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (path != null) {
      path.validate();
    }
    if (rootSymLink != null) {
      rootSymLink.validate();
    }
    if (rootSymLinkTarget != null) {
      rootSymLinkTarget.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuildJobStateFileHashEntryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildJobStateFileHashEntryStandardScheme getScheme() {
      return new BuildJobStateFileHashEntryStandardScheme();
    }
  }

  private static class BuildJobStateFileHashEntryStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildJobStateFileHashEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildJobStateFileHashEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.path = new PathWithUnixSeparators();
              struct.path.read(iprot);
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARCHIVE_MEMBER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveMemberPath = iprot.readString();
              struct.setArchiveMemberPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHA1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sha1 = iprot.readString();
              struct.setSha1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDirectory = iprot.readBool();
              struct.setIsDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATH_IS_ABSOLUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pathIsAbsolute = iprot.readBool();
              struct.setPathIsAbsoluteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contents = iprot.readBinary();
              struct.setContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROOT_SYM_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rootSymLink = new PathWithUnixSeparators();
              struct.rootSymLink.read(iprot);
              struct.setRootSymLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROOT_SYM_LINK_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rootSymLinkTarget = new PathWithUnixSeparators();
              struct.rootSymLinkTarget.read(iprot);
              struct.setRootSymLinkTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.children = new java.util.ArrayList<PathWithUnixSeparators>(_list36.size);
                PathWithUnixSeparators _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new PathWithUnixSeparators();
                  _elem37.read(iprot);
                  struct.children.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_EXECUTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExecutable = iprot.readBool();
              struct.setIsExecutableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MATERIALIZE_DURING_PRELOADING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.materializeDuringPreloading = iprot.readBool();
              struct.setMaterializeDuringPreloadingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildJobStateFileHashEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          struct.path.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.archiveMemberPath != null) {
        if (struct.isSetArchiveMemberPath()) {
          oprot.writeFieldBegin(ARCHIVE_MEMBER_PATH_FIELD_DESC);
          oprot.writeString(struct.archiveMemberPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sha1 != null) {
        if (struct.isSetSha1()) {
          oprot.writeFieldBegin(SHA1_FIELD_DESC);
          oprot.writeString(struct.sha1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDirectory()) {
        oprot.writeFieldBegin(IS_DIRECTORY_FIELD_DESC);
        oprot.writeBool(struct.isDirectory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPathIsAbsolute()) {
        oprot.writeFieldBegin(PATH_IS_ABSOLUTE_FIELD_DESC);
        oprot.writeBool(struct.pathIsAbsolute);
        oprot.writeFieldEnd();
      }
      if (struct.contents != null) {
        if (struct.isSetContents()) {
          oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
          oprot.writeBinary(struct.contents);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootSymLink != null) {
        if (struct.isSetRootSymLink()) {
          oprot.writeFieldBegin(ROOT_SYM_LINK_FIELD_DESC);
          struct.rootSymLink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootSymLinkTarget != null) {
        if (struct.isSetRootSymLinkTarget()) {
          oprot.writeFieldBegin(ROOT_SYM_LINK_TARGET_FIELD_DESC);
          struct.rootSymLinkTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.children != null) {
        if (struct.isSetChildren()) {
          oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.children.size()));
            for (PathWithUnixSeparators _iter39 : struct.children)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsExecutable()) {
        oprot.writeFieldBegin(IS_EXECUTABLE_FIELD_DESC);
        oprot.writeBool(struct.isExecutable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaterializeDuringPreloading()) {
        oprot.writeFieldBegin(MATERIALIZE_DURING_PRELOADING_FIELD_DESC);
        oprot.writeBool(struct.materializeDuringPreloading);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuildJobStateFileHashEntryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildJobStateFileHashEntryTupleScheme getScheme() {
      return new BuildJobStateFileHashEntryTupleScheme();
    }
  }

  private static class BuildJobStateFileHashEntryTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuildJobStateFileHashEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuildJobStateFileHashEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPath()) {
        optionals.set(0);
      }
      if (struct.isSetArchiveMemberPath()) {
        optionals.set(1);
      }
      if (struct.isSetSha1()) {
        optionals.set(2);
      }
      if (struct.isSetIsDirectory()) {
        optionals.set(3);
      }
      if (struct.isSetPathIsAbsolute()) {
        optionals.set(4);
      }
      if (struct.isSetContents()) {
        optionals.set(5);
      }
      if (struct.isSetRootSymLink()) {
        optionals.set(6);
      }
      if (struct.isSetRootSymLinkTarget()) {
        optionals.set(7);
      }
      if (struct.isSetChildren()) {
        optionals.set(8);
      }
      if (struct.isSetIsExecutable()) {
        optionals.set(9);
      }
      if (struct.isSetMaterializeDuringPreloading()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPath()) {
        struct.path.write(oprot);
      }
      if (struct.isSetArchiveMemberPath()) {
        oprot.writeString(struct.archiveMemberPath);
      }
      if (struct.isSetSha1()) {
        oprot.writeString(struct.sha1);
      }
      if (struct.isSetIsDirectory()) {
        oprot.writeBool(struct.isDirectory);
      }
      if (struct.isSetPathIsAbsolute()) {
        oprot.writeBool(struct.pathIsAbsolute);
      }
      if (struct.isSetContents()) {
        oprot.writeBinary(struct.contents);
      }
      if (struct.isSetRootSymLink()) {
        struct.rootSymLink.write(oprot);
      }
      if (struct.isSetRootSymLinkTarget()) {
        struct.rootSymLinkTarget.write(oprot);
      }
      if (struct.isSetChildren()) {
        {
          oprot.writeI32(struct.children.size());
          for (PathWithUnixSeparators _iter40 : struct.children)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetIsExecutable()) {
        oprot.writeBool(struct.isExecutable);
      }
      if (struct.isSetMaterializeDuringPreloading()) {
        oprot.writeBool(struct.materializeDuringPreloading);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuildJobStateFileHashEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.path = new PathWithUnixSeparators();
        struct.path.read(iprot);
        struct.setPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.archiveMemberPath = iprot.readString();
        struct.setArchiveMemberPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sha1 = iprot.readString();
        struct.setSha1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDirectory = iprot.readBool();
        struct.setIsDirectoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pathIsAbsolute = iprot.readBool();
        struct.setPathIsAbsoluteIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contents = iprot.readBinary();
        struct.setContentsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rootSymLink = new PathWithUnixSeparators();
        struct.rootSymLink.read(iprot);
        struct.setRootSymLinkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rootSymLinkTarget = new PathWithUnixSeparators();
        struct.rootSymLinkTarget.read(iprot);
        struct.setRootSymLinkTargetIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.children = new java.util.ArrayList<PathWithUnixSeparators>(_list41.size);
          PathWithUnixSeparators _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new PathWithUnixSeparators();
            _elem42.read(iprot);
            struct.children.add(_elem42);
          }
        }
        struct.setChildrenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isExecutable = iprot.readBool();
        struct.setIsExecutableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.materializeDuringPreloading = iprot.readBool();
        struct.setMaterializeDuringPreloadingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


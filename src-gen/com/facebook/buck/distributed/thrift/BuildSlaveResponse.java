/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class BuildSlaveResponse implements org.apache.thrift.TBase<BuildSlaveResponse, BuildSlaveResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BuildSlaveResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuildSlaveResponse");

  private static final org.apache.thrift.protocol.TField WAS_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("wasSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField GET_ALL_AVAILABLE_CAPACITY_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("getAllAvailableCapacityResponse", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("obtainAllAvailableCapacityResponse", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField OBTAIN_CAPACITY_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("obtainCapacityResponse", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField RETURN_CAPACITY_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnCapacityResponse", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuildSlaveResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuildSlaveResponseTupleSchemeFactory();

  public boolean wasSuccessful; // optional
  public java.lang.String errorMessage; // optional
  /**
   * 
   * @see BuildSlaveRequestType
   */
  public BuildSlaveRequestType type; // optional
  public GetAllAvailableCapacityResponse getAllAvailableCapacityResponse; // optional
  public ObtainAllAvailableCapacityResponse obtainAllAvailableCapacityResponse; // optional
  public ObtainCapacityResponse obtainCapacityResponse; // optional
  public ReturnCapacityResponse returnCapacityResponse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAS_SUCCESSFUL((short)1, "wasSuccessful"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    /**
     * 
     * @see BuildSlaveRequestType
     */
    TYPE((short)10, "type"),
    GET_ALL_AVAILABLE_CAPACITY_RESPONSE((short)11, "getAllAvailableCapacityResponse"),
    OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE((short)12, "obtainAllAvailableCapacityResponse"),
    OBTAIN_CAPACITY_RESPONSE((short)13, "obtainCapacityResponse"),
    RETURN_CAPACITY_RESPONSE((short)14, "returnCapacityResponse");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAS_SUCCESSFUL
          return WAS_SUCCESSFUL;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 10: // TYPE
          return TYPE;
        case 11: // GET_ALL_AVAILABLE_CAPACITY_RESPONSE
          return GET_ALL_AVAILABLE_CAPACITY_RESPONSE;
        case 12: // OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE
          return OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE;
        case 13: // OBTAIN_CAPACITY_RESPONSE
          return OBTAIN_CAPACITY_RESPONSE;
        case 14: // RETURN_CAPACITY_RESPONSE
          return RETURN_CAPACITY_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WASSUCCESSFUL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WAS_SUCCESSFUL,_Fields.ERROR_MESSAGE,_Fields.TYPE,_Fields.GET_ALL_AVAILABLE_CAPACITY_RESPONSE,_Fields.OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE,_Fields.OBTAIN_CAPACITY_RESPONSE,_Fields.RETURN_CAPACITY_RESPONSE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAS_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("wasSuccessful", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BuildSlaveRequestType.class)));
    tmpMap.put(_Fields.GET_ALL_AVAILABLE_CAPACITY_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("getAllAvailableCapacityResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAllAvailableCapacityResponse.class)));
    tmpMap.put(_Fields.OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("obtainAllAvailableCapacityResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObtainAllAvailableCapacityResponse.class)));
    tmpMap.put(_Fields.OBTAIN_CAPACITY_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("obtainCapacityResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObtainCapacityResponse.class)));
    tmpMap.put(_Fields.RETURN_CAPACITY_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("returnCapacityResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnCapacityResponse.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildSlaveResponse.class, metaDataMap);
  }

  public BuildSlaveResponse() {
    this.type = com.facebook.buck.distributed.thrift.BuildSlaveRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuildSlaveResponse(BuildSlaveResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wasSuccessful = other.wasSuccessful;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetGetAllAvailableCapacityResponse()) {
      this.getAllAvailableCapacityResponse = new GetAllAvailableCapacityResponse(other.getAllAvailableCapacityResponse);
    }
    if (other.isSetObtainAllAvailableCapacityResponse()) {
      this.obtainAllAvailableCapacityResponse = new ObtainAllAvailableCapacityResponse(other.obtainAllAvailableCapacityResponse);
    }
    if (other.isSetObtainCapacityResponse()) {
      this.obtainCapacityResponse = new ObtainCapacityResponse(other.obtainCapacityResponse);
    }
    if (other.isSetReturnCapacityResponse()) {
      this.returnCapacityResponse = new ReturnCapacityResponse(other.returnCapacityResponse);
    }
  }

  public BuildSlaveResponse deepCopy() {
    return new BuildSlaveResponse(this);
  }

  @Override
  public void clear() {
    setWasSuccessfulIsSet(false);
    this.wasSuccessful = false;
    this.errorMessage = null;
    this.type = com.facebook.buck.distributed.thrift.BuildSlaveRequestType.UNKNOWN;

    this.getAllAvailableCapacityResponse = null;
    this.obtainAllAvailableCapacityResponse = null;
    this.obtainCapacityResponse = null;
    this.returnCapacityResponse = null;
  }

  public boolean isWasSuccessful() {
    return this.wasSuccessful;
  }

  public BuildSlaveResponse setWasSuccessful(boolean wasSuccessful) {
    this.wasSuccessful = wasSuccessful;
    setWasSuccessfulIsSet(true);
    return this;
  }

  public void unsetWasSuccessful() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  /** Returns true if field wasSuccessful is set (has been assigned a value) and false otherwise */
  public boolean isSetWasSuccessful() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  public void setWasSuccessfulIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID, value);
  }

  public java.lang.String getErrorMessage() {
    return this.errorMessage;
  }

  public BuildSlaveResponse setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  /**
   * 
   * @see BuildSlaveRequestType
   */
  public BuildSlaveRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see BuildSlaveRequestType
   */
  public BuildSlaveResponse setType(BuildSlaveRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public GetAllAvailableCapacityResponse getGetAllAvailableCapacityResponse() {
    return this.getAllAvailableCapacityResponse;
  }

  public BuildSlaveResponse setGetAllAvailableCapacityResponse(GetAllAvailableCapacityResponse getAllAvailableCapacityResponse) {
    this.getAllAvailableCapacityResponse = getAllAvailableCapacityResponse;
    return this;
  }

  public void unsetGetAllAvailableCapacityResponse() {
    this.getAllAvailableCapacityResponse = null;
  }

  /** Returns true if field getAllAvailableCapacityResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetGetAllAvailableCapacityResponse() {
    return this.getAllAvailableCapacityResponse != null;
  }

  public void setGetAllAvailableCapacityResponseIsSet(boolean value) {
    if (!value) {
      this.getAllAvailableCapacityResponse = null;
    }
  }

  public ObtainAllAvailableCapacityResponse getObtainAllAvailableCapacityResponse() {
    return this.obtainAllAvailableCapacityResponse;
  }

  public BuildSlaveResponse setObtainAllAvailableCapacityResponse(ObtainAllAvailableCapacityResponse obtainAllAvailableCapacityResponse) {
    this.obtainAllAvailableCapacityResponse = obtainAllAvailableCapacityResponse;
    return this;
  }

  public void unsetObtainAllAvailableCapacityResponse() {
    this.obtainAllAvailableCapacityResponse = null;
  }

  /** Returns true if field obtainAllAvailableCapacityResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetObtainAllAvailableCapacityResponse() {
    return this.obtainAllAvailableCapacityResponse != null;
  }

  public void setObtainAllAvailableCapacityResponseIsSet(boolean value) {
    if (!value) {
      this.obtainAllAvailableCapacityResponse = null;
    }
  }

  public ObtainCapacityResponse getObtainCapacityResponse() {
    return this.obtainCapacityResponse;
  }

  public BuildSlaveResponse setObtainCapacityResponse(ObtainCapacityResponse obtainCapacityResponse) {
    this.obtainCapacityResponse = obtainCapacityResponse;
    return this;
  }

  public void unsetObtainCapacityResponse() {
    this.obtainCapacityResponse = null;
  }

  /** Returns true if field obtainCapacityResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetObtainCapacityResponse() {
    return this.obtainCapacityResponse != null;
  }

  public void setObtainCapacityResponseIsSet(boolean value) {
    if (!value) {
      this.obtainCapacityResponse = null;
    }
  }

  public ReturnCapacityResponse getReturnCapacityResponse() {
    return this.returnCapacityResponse;
  }

  public BuildSlaveResponse setReturnCapacityResponse(ReturnCapacityResponse returnCapacityResponse) {
    this.returnCapacityResponse = returnCapacityResponse;
    return this;
  }

  public void unsetReturnCapacityResponse() {
    this.returnCapacityResponse = null;
  }

  /** Returns true if field returnCapacityResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCapacityResponse() {
    return this.returnCapacityResponse != null;
  }

  public void setReturnCapacityResponseIsSet(boolean value) {
    if (!value) {
      this.returnCapacityResponse = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WAS_SUCCESSFUL:
      if (value == null) {
        unsetWasSuccessful();
      } else {
        setWasSuccessful((java.lang.Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BuildSlaveRequestType)value);
      }
      break;

    case GET_ALL_AVAILABLE_CAPACITY_RESPONSE:
      if (value == null) {
        unsetGetAllAvailableCapacityResponse();
      } else {
        setGetAllAvailableCapacityResponse((GetAllAvailableCapacityResponse)value);
      }
      break;

    case OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE:
      if (value == null) {
        unsetObtainAllAvailableCapacityResponse();
      } else {
        setObtainAllAvailableCapacityResponse((ObtainAllAvailableCapacityResponse)value);
      }
      break;

    case OBTAIN_CAPACITY_RESPONSE:
      if (value == null) {
        unsetObtainCapacityResponse();
      } else {
        setObtainCapacityResponse((ObtainCapacityResponse)value);
      }
      break;

    case RETURN_CAPACITY_RESPONSE:
      if (value == null) {
        unsetReturnCapacityResponse();
      } else {
        setReturnCapacityResponse((ReturnCapacityResponse)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WAS_SUCCESSFUL:
      return isWasSuccessful();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case TYPE:
      return getType();

    case GET_ALL_AVAILABLE_CAPACITY_RESPONSE:
      return getGetAllAvailableCapacityResponse();

    case OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE:
      return getObtainAllAvailableCapacityResponse();

    case OBTAIN_CAPACITY_RESPONSE:
      return getObtainCapacityResponse();

    case RETURN_CAPACITY_RESPONSE:
      return getReturnCapacityResponse();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WAS_SUCCESSFUL:
      return isSetWasSuccessful();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case TYPE:
      return isSetType();
    case GET_ALL_AVAILABLE_CAPACITY_RESPONSE:
      return isSetGetAllAvailableCapacityResponse();
    case OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE:
      return isSetObtainAllAvailableCapacityResponse();
    case OBTAIN_CAPACITY_RESPONSE:
      return isSetObtainCapacityResponse();
    case RETURN_CAPACITY_RESPONSE:
      return isSetReturnCapacityResponse();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuildSlaveResponse)
      return this.equals((BuildSlaveResponse)that);
    return false;
  }

  public boolean equals(BuildSlaveResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_wasSuccessful = true && this.isSetWasSuccessful();
    boolean that_present_wasSuccessful = true && that.isSetWasSuccessful();
    if (this_present_wasSuccessful || that_present_wasSuccessful) {
      if (!(this_present_wasSuccessful && that_present_wasSuccessful))
        return false;
      if (this.wasSuccessful != that.wasSuccessful)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_getAllAvailableCapacityResponse = true && this.isSetGetAllAvailableCapacityResponse();
    boolean that_present_getAllAvailableCapacityResponse = true && that.isSetGetAllAvailableCapacityResponse();
    if (this_present_getAllAvailableCapacityResponse || that_present_getAllAvailableCapacityResponse) {
      if (!(this_present_getAllAvailableCapacityResponse && that_present_getAllAvailableCapacityResponse))
        return false;
      if (!this.getAllAvailableCapacityResponse.equals(that.getAllAvailableCapacityResponse))
        return false;
    }

    boolean this_present_obtainAllAvailableCapacityResponse = true && this.isSetObtainAllAvailableCapacityResponse();
    boolean that_present_obtainAllAvailableCapacityResponse = true && that.isSetObtainAllAvailableCapacityResponse();
    if (this_present_obtainAllAvailableCapacityResponse || that_present_obtainAllAvailableCapacityResponse) {
      if (!(this_present_obtainAllAvailableCapacityResponse && that_present_obtainAllAvailableCapacityResponse))
        return false;
      if (!this.obtainAllAvailableCapacityResponse.equals(that.obtainAllAvailableCapacityResponse))
        return false;
    }

    boolean this_present_obtainCapacityResponse = true && this.isSetObtainCapacityResponse();
    boolean that_present_obtainCapacityResponse = true && that.isSetObtainCapacityResponse();
    if (this_present_obtainCapacityResponse || that_present_obtainCapacityResponse) {
      if (!(this_present_obtainCapacityResponse && that_present_obtainCapacityResponse))
        return false;
      if (!this.obtainCapacityResponse.equals(that.obtainCapacityResponse))
        return false;
    }

    boolean this_present_returnCapacityResponse = true && this.isSetReturnCapacityResponse();
    boolean that_present_returnCapacityResponse = true && that.isSetReturnCapacityResponse();
    if (this_present_returnCapacityResponse || that_present_returnCapacityResponse) {
      if (!(this_present_returnCapacityResponse && that_present_returnCapacityResponse))
        return false;
      if (!this.returnCapacityResponse.equals(that.returnCapacityResponse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWasSuccessful()) ? 131071 : 524287);
    if (isSetWasSuccessful())
      hashCode = hashCode * 8191 + ((wasSuccessful) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetErrorMessage()) ? 131071 : 524287);
    if (isSetErrorMessage())
      hashCode = hashCode * 8191 + errorMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetGetAllAvailableCapacityResponse()) ? 131071 : 524287);
    if (isSetGetAllAvailableCapacityResponse())
      hashCode = hashCode * 8191 + getAllAvailableCapacityResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetObtainAllAvailableCapacityResponse()) ? 131071 : 524287);
    if (isSetObtainAllAvailableCapacityResponse())
      hashCode = hashCode * 8191 + obtainAllAvailableCapacityResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetObtainCapacityResponse()) ? 131071 : 524287);
    if (isSetObtainCapacityResponse())
      hashCode = hashCode * 8191 + obtainCapacityResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetReturnCapacityResponse()) ? 131071 : 524287);
    if (isSetReturnCapacityResponse())
      hashCode = hashCode * 8191 + returnCapacityResponse.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BuildSlaveResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWasSuccessful()).compareTo(other.isSetWasSuccessful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWasSuccessful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wasSuccessful, other.wasSuccessful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGetAllAvailableCapacityResponse()).compareTo(other.isSetGetAllAvailableCapacityResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetAllAvailableCapacityResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getAllAvailableCapacityResponse, other.getAllAvailableCapacityResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObtainAllAvailableCapacityResponse()).compareTo(other.isSetObtainAllAvailableCapacityResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObtainAllAvailableCapacityResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obtainAllAvailableCapacityResponse, other.obtainAllAvailableCapacityResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObtainCapacityResponse()).compareTo(other.isSetObtainCapacityResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObtainCapacityResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obtainCapacityResponse, other.obtainCapacityResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReturnCapacityResponse()).compareTo(other.isSetReturnCapacityResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCapacityResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnCapacityResponse, other.returnCapacityResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuildSlaveResponse(");
    boolean first = true;

    if (isSetWasSuccessful()) {
      sb.append("wasSuccessful:");
      sb.append(this.wasSuccessful);
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetGetAllAvailableCapacityResponse()) {
      if (!first) sb.append(", ");
      sb.append("getAllAvailableCapacityResponse:");
      if (this.getAllAvailableCapacityResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.getAllAvailableCapacityResponse);
      }
      first = false;
    }
    if (isSetObtainAllAvailableCapacityResponse()) {
      if (!first) sb.append(", ");
      sb.append("obtainAllAvailableCapacityResponse:");
      if (this.obtainAllAvailableCapacityResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.obtainAllAvailableCapacityResponse);
      }
      first = false;
    }
    if (isSetObtainCapacityResponse()) {
      if (!first) sb.append(", ");
      sb.append("obtainCapacityResponse:");
      if (this.obtainCapacityResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.obtainCapacityResponse);
      }
      first = false;
    }
    if (isSetReturnCapacityResponse()) {
      if (!first) sb.append(", ");
      sb.append("returnCapacityResponse:");
      if (this.returnCapacityResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.returnCapacityResponse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (getAllAvailableCapacityResponse != null) {
      getAllAvailableCapacityResponse.validate();
    }
    if (obtainAllAvailableCapacityResponse != null) {
      obtainAllAvailableCapacityResponse.validate();
    }
    if (obtainCapacityResponse != null) {
      obtainCapacityResponse.validate();
    }
    if (returnCapacityResponse != null) {
      returnCapacityResponse.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuildSlaveResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveResponseStandardScheme getScheme() {
      return new BuildSlaveResponseStandardScheme();
    }
  }

  private static class BuildSlaveResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildSlaveResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildSlaveResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAS_SUCCESSFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wasSuccessful = iprot.readBool();
              struct.setWasSuccessfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.distributed.thrift.BuildSlaveRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GET_ALL_AVAILABLE_CAPACITY_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.getAllAvailableCapacityResponse = new GetAllAvailableCapacityResponse();
              struct.getAllAvailableCapacityResponse.read(iprot);
              struct.setGetAllAvailableCapacityResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.obtainAllAvailableCapacityResponse = new ObtainAllAvailableCapacityResponse();
              struct.obtainAllAvailableCapacityResponse.read(iprot);
              struct.setObtainAllAvailableCapacityResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OBTAIN_CAPACITY_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.obtainCapacityResponse = new ObtainCapacityResponse();
              struct.obtainCapacityResponse.read(iprot);
              struct.setObtainCapacityResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RETURN_CAPACITY_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.returnCapacityResponse = new ReturnCapacityResponse();
              struct.returnCapacityResponse.read(iprot);
              struct.setReturnCapacityResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildSlaveResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWasSuccessful()) {
        oprot.writeFieldBegin(WAS_SUCCESSFUL_FIELD_DESC);
        oprot.writeBool(struct.wasSuccessful);
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.getAllAvailableCapacityResponse != null) {
        if (struct.isSetGetAllAvailableCapacityResponse()) {
          oprot.writeFieldBegin(GET_ALL_AVAILABLE_CAPACITY_RESPONSE_FIELD_DESC);
          struct.getAllAvailableCapacityResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.obtainAllAvailableCapacityResponse != null) {
        if (struct.isSetObtainAllAvailableCapacityResponse()) {
          oprot.writeFieldBegin(OBTAIN_ALL_AVAILABLE_CAPACITY_RESPONSE_FIELD_DESC);
          struct.obtainAllAvailableCapacityResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.obtainCapacityResponse != null) {
        if (struct.isSetObtainCapacityResponse()) {
          oprot.writeFieldBegin(OBTAIN_CAPACITY_RESPONSE_FIELD_DESC);
          struct.obtainCapacityResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.returnCapacityResponse != null) {
        if (struct.isSetReturnCapacityResponse()) {
          oprot.writeFieldBegin(RETURN_CAPACITY_RESPONSE_FIELD_DESC);
          struct.returnCapacityResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuildSlaveResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuildSlaveResponseTupleScheme getScheme() {
      return new BuildSlaveResponseTupleScheme();
    }
  }

  private static class BuildSlaveResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuildSlaveResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuildSlaveResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWasSuccessful()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetGetAllAvailableCapacityResponse()) {
        optionals.set(3);
      }
      if (struct.isSetObtainAllAvailableCapacityResponse()) {
        optionals.set(4);
      }
      if (struct.isSetObtainCapacityResponse()) {
        optionals.set(5);
      }
      if (struct.isSetReturnCapacityResponse()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetWasSuccessful()) {
        oprot.writeBool(struct.wasSuccessful);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetGetAllAvailableCapacityResponse()) {
        struct.getAllAvailableCapacityResponse.write(oprot);
      }
      if (struct.isSetObtainAllAvailableCapacityResponse()) {
        struct.obtainAllAvailableCapacityResponse.write(oprot);
      }
      if (struct.isSetObtainCapacityResponse()) {
        struct.obtainCapacityResponse.write(oprot);
      }
      if (struct.isSetReturnCapacityResponse()) {
        struct.returnCapacityResponse.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuildSlaveResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.wasSuccessful = iprot.readBool();
        struct.setWasSuccessfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.facebook.buck.distributed.thrift.BuildSlaveRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.getAllAvailableCapacityResponse = new GetAllAvailableCapacityResponse();
        struct.getAllAvailableCapacityResponse.read(iprot);
        struct.setGetAllAvailableCapacityResponseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.obtainAllAvailableCapacityResponse = new ObtainAllAvailableCapacityResponse();
        struct.obtainAllAvailableCapacityResponse.read(iprot);
        struct.setObtainAllAvailableCapacityResponseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.obtainCapacityResponse = new ObtainCapacityResponse();
        struct.obtainCapacityResponse.read(iprot);
        struct.setObtainCapacityResponseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.returnCapacityResponse = new ReturnCapacityResponse();
        struct.returnCapacityResponse.read(iprot);
        struct.setReturnCapacityResponseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-05")
public class GetItemsToBuildResponse implements org.apache.thrift.TBase<GetItemsToBuildResponse, GetItemsToBuildResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetItemsToBuildResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetItemsToBuildResponse");

  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUILD_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("buildTargets", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetItemsToBuildResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetItemsToBuildResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see GetItemsToBuildAction
   */
  public GetItemsToBuildAction action; // optional
  public List<String> buildTargets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see GetItemsToBuildAction
     */
    ACTION((short)1, "action"),
    BUILD_TARGETS((short)2, "buildTargets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION
          return ACTION;
        case 2: // BUILD_TARGETS
          return BUILD_TARGETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ACTION,_Fields.BUILD_TARGETS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GetItemsToBuildAction.class)));
    tmpMap.put(_Fields.BUILD_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("buildTargets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetItemsToBuildResponse.class, metaDataMap);
  }

  public GetItemsToBuildResponse() {
    this.action = com.facebook.buck.distributed.thrift.GetItemsToBuildAction.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetItemsToBuildResponse(GetItemsToBuildResponse other) {
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetBuildTargets()) {
      List<String> __this__buildTargets = new ArrayList<String>(other.buildTargets);
      this.buildTargets = __this__buildTargets;
    }
  }

  public GetItemsToBuildResponse deepCopy() {
    return new GetItemsToBuildResponse(this);
  }

  @Override
  public void clear() {
    this.action = com.facebook.buck.distributed.thrift.GetItemsToBuildAction.UNKNOWN;

    this.buildTargets = null;
  }

  /**
   * 
   * @see GetItemsToBuildAction
   */
  public GetItemsToBuildAction getAction() {
    return this.action;
  }

  /**
   * 
   * @see GetItemsToBuildAction
   */
  public GetItemsToBuildResponse setAction(GetItemsToBuildAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public int getBuildTargetsSize() {
    return (this.buildTargets == null) ? 0 : this.buildTargets.size();
  }

  public java.util.Iterator<String> getBuildTargetsIterator() {
    return (this.buildTargets == null) ? null : this.buildTargets.iterator();
  }

  public void addToBuildTargets(String elem) {
    if (this.buildTargets == null) {
      this.buildTargets = new ArrayList<String>();
    }
    this.buildTargets.add(elem);
  }

  public List<String> getBuildTargets() {
    return this.buildTargets;
  }

  public GetItemsToBuildResponse setBuildTargets(List<String> buildTargets) {
    this.buildTargets = buildTargets;
    return this;
  }

  public void unsetBuildTargets() {
    this.buildTargets = null;
  }

  /** Returns true if field buildTargets is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildTargets() {
    return this.buildTargets != null;
  }

  public void setBuildTargetsIsSet(boolean value) {
    if (!value) {
      this.buildTargets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((GetItemsToBuildAction)value);
      }
      break;

    case BUILD_TARGETS:
      if (value == null) {
        unsetBuildTargets();
      } else {
        setBuildTargets((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION:
      return getAction();

    case BUILD_TARGETS:
      return getBuildTargets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTION:
      return isSetAction();
    case BUILD_TARGETS:
      return isSetBuildTargets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetItemsToBuildResponse)
      return this.equals((GetItemsToBuildResponse)that);
    return false;
  }

  public boolean equals(GetItemsToBuildResponse that) {
    if (that == null)
      return false;

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_buildTargets = true && this.isSetBuildTargets();
    boolean that_present_buildTargets = true && that.isSetBuildTargets();
    if (this_present_buildTargets || that_present_buildTargets) {
      if (!(this_present_buildTargets && that_present_buildTargets))
        return false;
      if (!this.buildTargets.equals(that.buildTargets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_action = true && (isSetAction());
    list.add(present_action);
    if (present_action)
      list.add(action.getValue());

    boolean present_buildTargets = true && (isSetBuildTargets());
    list.add(present_buildTargets);
    if (present_buildTargets)
      list.add(buildTargets);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetItemsToBuildResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuildTargets()).compareTo(other.isSetBuildTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildTargets, other.buildTargets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetItemsToBuildResponse(");
    boolean first = true;

    if (isSetAction()) {
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetBuildTargets()) {
      if (!first) sb.append(", ");
      sb.append("buildTargets:");
      if (this.buildTargets == null) {
        sb.append("null");
      } else {
        sb.append(this.buildTargets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetItemsToBuildResponseStandardSchemeFactory implements SchemeFactory {
    public GetItemsToBuildResponseStandardScheme getScheme() {
      return new GetItemsToBuildResponseStandardScheme();
    }
  }

  private static class GetItemsToBuildResponseStandardScheme extends StandardScheme<GetItemsToBuildResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetItemsToBuildResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = com.facebook.buck.distributed.thrift.GetItemsToBuildAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUILD_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.buildTargets = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.buildTargets.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBuildTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetItemsToBuildResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeI32(struct.action.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildTargets != null) {
        if (struct.isSetBuildTargets()) {
          oprot.writeFieldBegin(BUILD_TARGETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.buildTargets.size()));
            for (String _iter3 : struct.buildTargets)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetItemsToBuildResponseTupleSchemeFactory implements SchemeFactory {
    public GetItemsToBuildResponseTupleScheme getScheme() {
      return new GetItemsToBuildResponseTupleScheme();
    }
  }

  private static class GetItemsToBuildResponseTupleScheme extends TupleScheme<GetItemsToBuildResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetItemsToBuildResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAction()) {
        optionals.set(0);
      }
      if (struct.isSetBuildTargets()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAction()) {
        oprot.writeI32(struct.action.getValue());
      }
      if (struct.isSetBuildTargets()) {
        {
          oprot.writeI32(struct.buildTargets.size());
          for (String _iter4 : struct.buildTargets)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetItemsToBuildResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.action = com.facebook.buck.distributed.thrift.GetItemsToBuildAction.findByValue(iprot.readI32());
        struct.setActionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.buildTargets = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.buildTargets.add(_elem6);
          }
        }
        struct.setBuildTargetsIsSet(true);
      }
    }
  }

}


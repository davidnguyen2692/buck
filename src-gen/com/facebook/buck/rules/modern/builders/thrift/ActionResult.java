/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.rules.modern.builders.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ActionResult implements org.apache.thrift.TBase<ActionResult, ActionResult._Fields>, java.io.Serializable, Cloneable, Comparable<ActionResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActionResult");

  private static final org.apache.thrift.protocol.TField OUTPUT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFiles", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_DIRECTORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDirectories", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXIT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exitCode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STDOUT_RAW_FIELD_DESC = new org.apache.thrift.protocol.TField("stdoutRaw", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STDOUT_DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("stdoutDigest", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField STDERR_RAW_FIELD_DESC = new org.apache.thrift.protocol.TField("stderrRaw", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STDERR_DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("stderrDigest", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ActionResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ActionResultTupleSchemeFactory();

  public java.util.List<OutputFile> outputFiles; // required
  public java.util.List<OutputDirectory> outputDirectories; // required
  public int exitCode; // required
  public java.nio.ByteBuffer stdoutRaw; // required
  public Digest stdoutDigest; // required
  public java.nio.ByteBuffer stderrRaw; // required
  public Digest stderrDigest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTPUT_FILES((short)2, "outputFiles"),
    OUTPUT_DIRECTORIES((short)3, "outputDirectories"),
    EXIT_CODE((short)4, "exitCode"),
    STDOUT_RAW((short)5, "stdoutRaw"),
    STDOUT_DIGEST((short)6, "stdoutDigest"),
    STDERR_RAW((short)7, "stderrRaw"),
    STDERR_DIGEST((short)8, "stderrDigest");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // OUTPUT_FILES
          return OUTPUT_FILES;
        case 3: // OUTPUT_DIRECTORIES
          return OUTPUT_DIRECTORIES;
        case 4: // EXIT_CODE
          return EXIT_CODE;
        case 5: // STDOUT_RAW
          return STDOUT_RAW;
        case 6: // STDOUT_DIGEST
          return STDOUT_DIGEST;
        case 7: // STDERR_RAW
          return STDERR_RAW;
        case 8: // STDERR_DIGEST
          return STDERR_DIGEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXITCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUT_FILES, new org.apache.thrift.meta_data.FieldMetaData("outputFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutputFile.class))));
    tmpMap.put(_Fields.OUTPUT_DIRECTORIES, new org.apache.thrift.meta_data.FieldMetaData("outputDirectories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutputDirectory.class))));
    tmpMap.put(_Fields.EXIT_CODE, new org.apache.thrift.meta_data.FieldMetaData("exitCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STDOUT_RAW, new org.apache.thrift.meta_data.FieldMetaData("stdoutRaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.STDOUT_DIGEST, new org.apache.thrift.meta_data.FieldMetaData("stdoutDigest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
    tmpMap.put(_Fields.STDERR_RAW, new org.apache.thrift.meta_data.FieldMetaData("stderrRaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.STDERR_DIGEST, new org.apache.thrift.meta_data.FieldMetaData("stderrDigest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActionResult.class, metaDataMap);
  }

  public ActionResult() {
  }

  public ActionResult(
    java.util.List<OutputFile> outputFiles,
    java.util.List<OutputDirectory> outputDirectories,
    int exitCode,
    java.nio.ByteBuffer stdoutRaw,
    Digest stdoutDigest,
    java.nio.ByteBuffer stderrRaw,
    Digest stderrDigest)
  {
    this();
    this.outputFiles = outputFiles;
    this.outputDirectories = outputDirectories;
    this.exitCode = exitCode;
    setExitCodeIsSet(true);
    this.stdoutRaw = org.apache.thrift.TBaseHelper.copyBinary(stdoutRaw);
    this.stdoutDigest = stdoutDigest;
    this.stderrRaw = org.apache.thrift.TBaseHelper.copyBinary(stderrRaw);
    this.stderrDigest = stderrDigest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionResult(ActionResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOutputFiles()) {
      java.util.List<OutputFile> __this__outputFiles = new java.util.ArrayList<OutputFile>(other.outputFiles.size());
      for (OutputFile other_element : other.outputFiles) {
        __this__outputFiles.add(new OutputFile(other_element));
      }
      this.outputFiles = __this__outputFiles;
    }
    if (other.isSetOutputDirectories()) {
      java.util.List<OutputDirectory> __this__outputDirectories = new java.util.ArrayList<OutputDirectory>(other.outputDirectories.size());
      for (OutputDirectory other_element : other.outputDirectories) {
        __this__outputDirectories.add(new OutputDirectory(other_element));
      }
      this.outputDirectories = __this__outputDirectories;
    }
    this.exitCode = other.exitCode;
    if (other.isSetStdoutRaw()) {
      this.stdoutRaw = org.apache.thrift.TBaseHelper.copyBinary(other.stdoutRaw);
    }
    if (other.isSetStdoutDigest()) {
      this.stdoutDigest = new Digest(other.stdoutDigest);
    }
    if (other.isSetStderrRaw()) {
      this.stderrRaw = org.apache.thrift.TBaseHelper.copyBinary(other.stderrRaw);
    }
    if (other.isSetStderrDigest()) {
      this.stderrDigest = new Digest(other.stderrDigest);
    }
  }

  public ActionResult deepCopy() {
    return new ActionResult(this);
  }

  @Override
  public void clear() {
    this.outputFiles = null;
    this.outputDirectories = null;
    setExitCodeIsSet(false);
    this.exitCode = 0;
    this.stdoutRaw = null;
    this.stdoutDigest = null;
    this.stderrRaw = null;
    this.stderrDigest = null;
  }

  public int getOutputFilesSize() {
    return (this.outputFiles == null) ? 0 : this.outputFiles.size();
  }

  public java.util.Iterator<OutputFile> getOutputFilesIterator() {
    return (this.outputFiles == null) ? null : this.outputFiles.iterator();
  }

  public void addToOutputFiles(OutputFile elem) {
    if (this.outputFiles == null) {
      this.outputFiles = new java.util.ArrayList<OutputFile>();
    }
    this.outputFiles.add(elem);
  }

  public java.util.List<OutputFile> getOutputFiles() {
    return this.outputFiles;
  }

  public ActionResult setOutputFiles(java.util.List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public void unsetOutputFiles() {
    this.outputFiles = null;
  }

  /** Returns true if field outputFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputFiles() {
    return this.outputFiles != null;
  }

  public void setOutputFilesIsSet(boolean value) {
    if (!value) {
      this.outputFiles = null;
    }
  }

  public int getOutputDirectoriesSize() {
    return (this.outputDirectories == null) ? 0 : this.outputDirectories.size();
  }

  public java.util.Iterator<OutputDirectory> getOutputDirectoriesIterator() {
    return (this.outputDirectories == null) ? null : this.outputDirectories.iterator();
  }

  public void addToOutputDirectories(OutputDirectory elem) {
    if (this.outputDirectories == null) {
      this.outputDirectories = new java.util.ArrayList<OutputDirectory>();
    }
    this.outputDirectories.add(elem);
  }

  public java.util.List<OutputDirectory> getOutputDirectories() {
    return this.outputDirectories;
  }

  public ActionResult setOutputDirectories(java.util.List<OutputDirectory> outputDirectories) {
    this.outputDirectories = outputDirectories;
    return this;
  }

  public void unsetOutputDirectories() {
    this.outputDirectories = null;
  }

  /** Returns true if field outputDirectories is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDirectories() {
    return this.outputDirectories != null;
  }

  public void setOutputDirectoriesIsSet(boolean value) {
    if (!value) {
      this.outputDirectories = null;
    }
  }

  public int getExitCode() {
    return this.exitCode;
  }

  public ActionResult setExitCode(int exitCode) {
    this.exitCode = exitCode;
    setExitCodeIsSet(true);
    return this;
  }

  public void unsetExitCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  /** Returns true if field exitCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExitCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  public void setExitCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXITCODE_ISSET_ID, value);
  }

  public byte[] getStdoutRaw() {
    setStdoutRaw(org.apache.thrift.TBaseHelper.rightSize(stdoutRaw));
    return stdoutRaw == null ? null : stdoutRaw.array();
  }

  public java.nio.ByteBuffer bufferForStdoutRaw() {
    return org.apache.thrift.TBaseHelper.copyBinary(stdoutRaw);
  }

  public ActionResult setStdoutRaw(byte[] stdoutRaw) {
    this.stdoutRaw = stdoutRaw == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(stdoutRaw.clone());
    return this;
  }

  public ActionResult setStdoutRaw(java.nio.ByteBuffer stdoutRaw) {
    this.stdoutRaw = org.apache.thrift.TBaseHelper.copyBinary(stdoutRaw);
    return this;
  }

  public void unsetStdoutRaw() {
    this.stdoutRaw = null;
  }

  /** Returns true if field stdoutRaw is set (has been assigned a value) and false otherwise */
  public boolean isSetStdoutRaw() {
    return this.stdoutRaw != null;
  }

  public void setStdoutRawIsSet(boolean value) {
    if (!value) {
      this.stdoutRaw = null;
    }
  }

  public Digest getStdoutDigest() {
    return this.stdoutDigest;
  }

  public ActionResult setStdoutDigest(Digest stdoutDigest) {
    this.stdoutDigest = stdoutDigest;
    return this;
  }

  public void unsetStdoutDigest() {
    this.stdoutDigest = null;
  }

  /** Returns true if field stdoutDigest is set (has been assigned a value) and false otherwise */
  public boolean isSetStdoutDigest() {
    return this.stdoutDigest != null;
  }

  public void setStdoutDigestIsSet(boolean value) {
    if (!value) {
      this.stdoutDigest = null;
    }
  }

  public byte[] getStderrRaw() {
    setStderrRaw(org.apache.thrift.TBaseHelper.rightSize(stderrRaw));
    return stderrRaw == null ? null : stderrRaw.array();
  }

  public java.nio.ByteBuffer bufferForStderrRaw() {
    return org.apache.thrift.TBaseHelper.copyBinary(stderrRaw);
  }

  public ActionResult setStderrRaw(byte[] stderrRaw) {
    this.stderrRaw = stderrRaw == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(stderrRaw.clone());
    return this;
  }

  public ActionResult setStderrRaw(java.nio.ByteBuffer stderrRaw) {
    this.stderrRaw = org.apache.thrift.TBaseHelper.copyBinary(stderrRaw);
    return this;
  }

  public void unsetStderrRaw() {
    this.stderrRaw = null;
  }

  /** Returns true if field stderrRaw is set (has been assigned a value) and false otherwise */
  public boolean isSetStderrRaw() {
    return this.stderrRaw != null;
  }

  public void setStderrRawIsSet(boolean value) {
    if (!value) {
      this.stderrRaw = null;
    }
  }

  public Digest getStderrDigest() {
    return this.stderrDigest;
  }

  public ActionResult setStderrDigest(Digest stderrDigest) {
    this.stderrDigest = stderrDigest;
    return this;
  }

  public void unsetStderrDigest() {
    this.stderrDigest = null;
  }

  /** Returns true if field stderrDigest is set (has been assigned a value) and false otherwise */
  public boolean isSetStderrDigest() {
    return this.stderrDigest != null;
  }

  public void setStderrDigestIsSet(boolean value) {
    if (!value) {
      this.stderrDigest = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OUTPUT_FILES:
      if (value == null) {
        unsetOutputFiles();
      } else {
        setOutputFiles((java.util.List<OutputFile>)value);
      }
      break;

    case OUTPUT_DIRECTORIES:
      if (value == null) {
        unsetOutputDirectories();
      } else {
        setOutputDirectories((java.util.List<OutputDirectory>)value);
      }
      break;

    case EXIT_CODE:
      if (value == null) {
        unsetExitCode();
      } else {
        setExitCode((java.lang.Integer)value);
      }
      break;

    case STDOUT_RAW:
      if (value == null) {
        unsetStdoutRaw();
      } else {
        if (value instanceof byte[]) {
          setStdoutRaw((byte[])value);
        } else {
          setStdoutRaw((java.nio.ByteBuffer)value);
        }
      }
      break;

    case STDOUT_DIGEST:
      if (value == null) {
        unsetStdoutDigest();
      } else {
        setStdoutDigest((Digest)value);
      }
      break;

    case STDERR_RAW:
      if (value == null) {
        unsetStderrRaw();
      } else {
        if (value instanceof byte[]) {
          setStderrRaw((byte[])value);
        } else {
          setStderrRaw((java.nio.ByteBuffer)value);
        }
      }
      break;

    case STDERR_DIGEST:
      if (value == null) {
        unsetStderrDigest();
      } else {
        setStderrDigest((Digest)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUT_FILES:
      return getOutputFiles();

    case OUTPUT_DIRECTORIES:
      return getOutputDirectories();

    case EXIT_CODE:
      return getExitCode();

    case STDOUT_RAW:
      return getStdoutRaw();

    case STDOUT_DIGEST:
      return getStdoutDigest();

    case STDERR_RAW:
      return getStderrRaw();

    case STDERR_DIGEST:
      return getStderrDigest();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OUTPUT_FILES:
      return isSetOutputFiles();
    case OUTPUT_DIRECTORIES:
      return isSetOutputDirectories();
    case EXIT_CODE:
      return isSetExitCode();
    case STDOUT_RAW:
      return isSetStdoutRaw();
    case STDOUT_DIGEST:
      return isSetStdoutDigest();
    case STDERR_RAW:
      return isSetStderrRaw();
    case STDERR_DIGEST:
      return isSetStderrDigest();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionResult)
      return this.equals((ActionResult)that);
    return false;
  }

  public boolean equals(ActionResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_outputFiles = true && this.isSetOutputFiles();
    boolean that_present_outputFiles = true && that.isSetOutputFiles();
    if (this_present_outputFiles || that_present_outputFiles) {
      if (!(this_present_outputFiles && that_present_outputFiles))
        return false;
      if (!this.outputFiles.equals(that.outputFiles))
        return false;
    }

    boolean this_present_outputDirectories = true && this.isSetOutputDirectories();
    boolean that_present_outputDirectories = true && that.isSetOutputDirectories();
    if (this_present_outputDirectories || that_present_outputDirectories) {
      if (!(this_present_outputDirectories && that_present_outputDirectories))
        return false;
      if (!this.outputDirectories.equals(that.outputDirectories))
        return false;
    }

    boolean this_present_exitCode = true;
    boolean that_present_exitCode = true;
    if (this_present_exitCode || that_present_exitCode) {
      if (!(this_present_exitCode && that_present_exitCode))
        return false;
      if (this.exitCode != that.exitCode)
        return false;
    }

    boolean this_present_stdoutRaw = true && this.isSetStdoutRaw();
    boolean that_present_stdoutRaw = true && that.isSetStdoutRaw();
    if (this_present_stdoutRaw || that_present_stdoutRaw) {
      if (!(this_present_stdoutRaw && that_present_stdoutRaw))
        return false;
      if (!this.stdoutRaw.equals(that.stdoutRaw))
        return false;
    }

    boolean this_present_stdoutDigest = true && this.isSetStdoutDigest();
    boolean that_present_stdoutDigest = true && that.isSetStdoutDigest();
    if (this_present_stdoutDigest || that_present_stdoutDigest) {
      if (!(this_present_stdoutDigest && that_present_stdoutDigest))
        return false;
      if (!this.stdoutDigest.equals(that.stdoutDigest))
        return false;
    }

    boolean this_present_stderrRaw = true && this.isSetStderrRaw();
    boolean that_present_stderrRaw = true && that.isSetStderrRaw();
    if (this_present_stderrRaw || that_present_stderrRaw) {
      if (!(this_present_stderrRaw && that_present_stderrRaw))
        return false;
      if (!this.stderrRaw.equals(that.stderrRaw))
        return false;
    }

    boolean this_present_stderrDigest = true && this.isSetStderrDigest();
    boolean that_present_stderrDigest = true && that.isSetStderrDigest();
    if (this_present_stderrDigest || that_present_stderrDigest) {
      if (!(this_present_stderrDigest && that_present_stderrDigest))
        return false;
      if (!this.stderrDigest.equals(that.stderrDigest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOutputFiles()) ? 131071 : 524287);
    if (isSetOutputFiles())
      hashCode = hashCode * 8191 + outputFiles.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputDirectories()) ? 131071 : 524287);
    if (isSetOutputDirectories())
      hashCode = hashCode * 8191 + outputDirectories.hashCode();

    hashCode = hashCode * 8191 + exitCode;

    hashCode = hashCode * 8191 + ((isSetStdoutRaw()) ? 131071 : 524287);
    if (isSetStdoutRaw())
      hashCode = hashCode * 8191 + stdoutRaw.hashCode();

    hashCode = hashCode * 8191 + ((isSetStdoutDigest()) ? 131071 : 524287);
    if (isSetStdoutDigest())
      hashCode = hashCode * 8191 + stdoutDigest.hashCode();

    hashCode = hashCode * 8191 + ((isSetStderrRaw()) ? 131071 : 524287);
    if (isSetStderrRaw())
      hashCode = hashCode * 8191 + stderrRaw.hashCode();

    hashCode = hashCode * 8191 + ((isSetStderrDigest()) ? 131071 : 524287);
    if (isSetStderrDigest())
      hashCode = hashCode * 8191 + stderrDigest.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ActionResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOutputFiles()).compareTo(other.isSetOutputFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFiles, other.outputFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutputDirectories()).compareTo(other.isSetOutputDirectories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDirectories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDirectories, other.outputDirectories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExitCode()).compareTo(other.isSetExitCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExitCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exitCode, other.exitCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdoutRaw()).compareTo(other.isSetStdoutRaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdoutRaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdoutRaw, other.stdoutRaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStdoutDigest()).compareTo(other.isSetStdoutDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdoutDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdoutDigest, other.stdoutDigest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStderrRaw()).compareTo(other.isSetStderrRaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStderrRaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stderrRaw, other.stderrRaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStderrDigest()).compareTo(other.isSetStderrDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStderrDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stderrDigest, other.stderrDigest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ActionResult(");
    boolean first = true;

    sb.append("outputFiles:");
    if (this.outputFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.outputFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputDirectories:");
    if (this.outputDirectories == null) {
      sb.append("null");
    } else {
      sb.append(this.outputDirectories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exitCode:");
    sb.append(this.exitCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stdoutRaw:");
    if (this.stdoutRaw == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.stdoutRaw, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stdoutDigest:");
    if (this.stdoutDigest == null) {
      sb.append("null");
    } else {
      sb.append(this.stdoutDigest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stderrRaw:");
    if (this.stderrRaw == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.stderrRaw, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stderrDigest:");
    if (this.stderrDigest == null) {
      sb.append("null");
    } else {
      sb.append(this.stderrDigest);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stdoutDigest != null) {
      stdoutDigest.validate();
    }
    if (stderrDigest != null) {
      stderrDigest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActionResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActionResultStandardScheme getScheme() {
      return new ActionResultStandardScheme();
    }
  }

  private static class ActionResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ActionResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // OUTPUT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.outputFiles = new java.util.ArrayList<OutputFile>(_list32.size);
                OutputFile _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new OutputFile();
                  _elem33.read(iprot);
                  struct.outputFiles.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setOutputFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT_DIRECTORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.outputDirectories = new java.util.ArrayList<OutputDirectory>(_list35.size);
                OutputDirectory _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new OutputDirectory();
                  _elem36.read(iprot);
                  struct.outputDirectories.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setOutputDirectoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXIT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exitCode = iprot.readI32();
              struct.setExitCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STDOUT_RAW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stdoutRaw = iprot.readBinary();
              struct.setStdoutRawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STDOUT_DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stdoutDigest = new Digest();
              struct.stdoutDigest.read(iprot);
              struct.setStdoutDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STDERR_RAW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stderrRaw = iprot.readBinary();
              struct.setStderrRawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STDERR_DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stderrDigest = new Digest();
              struct.stderrDigest.read(iprot);
              struct.setStderrDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActionResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outputFiles != null) {
        oprot.writeFieldBegin(OUTPUT_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outputFiles.size()));
          for (OutputFile _iter38 : struct.outputFiles)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outputDirectories != null) {
        oprot.writeFieldBegin(OUTPUT_DIRECTORIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outputDirectories.size()));
          for (OutputDirectory _iter39 : struct.outputDirectories)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXIT_CODE_FIELD_DESC);
      oprot.writeI32(struct.exitCode);
      oprot.writeFieldEnd();
      if (struct.stdoutRaw != null) {
        oprot.writeFieldBegin(STDOUT_RAW_FIELD_DESC);
        oprot.writeBinary(struct.stdoutRaw);
        oprot.writeFieldEnd();
      }
      if (struct.stdoutDigest != null) {
        oprot.writeFieldBegin(STDOUT_DIGEST_FIELD_DESC);
        struct.stdoutDigest.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.stderrRaw != null) {
        oprot.writeFieldBegin(STDERR_RAW_FIELD_DESC);
        oprot.writeBinary(struct.stderrRaw);
        oprot.writeFieldEnd();
      }
      if (struct.stderrDigest != null) {
        oprot.writeFieldBegin(STDERR_DIGEST_FIELD_DESC);
        struct.stderrDigest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActionResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActionResultTupleScheme getScheme() {
      return new ActionResultTupleScheme();
    }
  }

  private static class ActionResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ActionResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOutputFiles()) {
        optionals.set(0);
      }
      if (struct.isSetOutputDirectories()) {
        optionals.set(1);
      }
      if (struct.isSetExitCode()) {
        optionals.set(2);
      }
      if (struct.isSetStdoutRaw()) {
        optionals.set(3);
      }
      if (struct.isSetStdoutDigest()) {
        optionals.set(4);
      }
      if (struct.isSetStderrRaw()) {
        optionals.set(5);
      }
      if (struct.isSetStderrDigest()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOutputFiles()) {
        {
          oprot.writeI32(struct.outputFiles.size());
          for (OutputFile _iter40 : struct.outputFiles)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetOutputDirectories()) {
        {
          oprot.writeI32(struct.outputDirectories.size());
          for (OutputDirectory _iter41 : struct.outputDirectories)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetExitCode()) {
        oprot.writeI32(struct.exitCode);
      }
      if (struct.isSetStdoutRaw()) {
        oprot.writeBinary(struct.stdoutRaw);
      }
      if (struct.isSetStdoutDigest()) {
        struct.stdoutDigest.write(oprot);
      }
      if (struct.isSetStderrRaw()) {
        oprot.writeBinary(struct.stderrRaw);
      }
      if (struct.isSetStderrDigest()) {
        struct.stderrDigest.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outputFiles = new java.util.ArrayList<OutputFile>(_list42.size);
          OutputFile _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new OutputFile();
            _elem43.read(iprot);
            struct.outputFiles.add(_elem43);
          }
        }
        struct.setOutputFilesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outputDirectories = new java.util.ArrayList<OutputDirectory>(_list45.size);
          OutputDirectory _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new OutputDirectory();
            _elem46.read(iprot);
            struct.outputDirectories.add(_elem46);
          }
        }
        struct.setOutputDirectoriesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exitCode = iprot.readI32();
        struct.setExitCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stdoutRaw = iprot.readBinary();
        struct.setStdoutRawIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stdoutDigest = new Digest();
        struct.stdoutDigest.read(iprot);
        struct.setStdoutDigestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stderrRaw = iprot.readBinary();
        struct.setStderrRawIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stderrDigest = new Digest();
        struct.stderrDigest.read(iprot);
        struct.setStderrDigestIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.rules.modern.builders.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class Directory implements org.apache.thrift.TBase<Directory, Directory._Fields>, java.io.Serializable, Cloneable, Comparable<Directory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Directory");

  private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("directories", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SYMLINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("symlinks", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DirectoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DirectoryTupleSchemeFactory();

  public java.util.List<FileNode> files; // required
  public java.util.List<DirectoryNode> directories; // required
  public java.util.List<SymlinkNode> symlinks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILES((short)1, "files"),
    DIRECTORIES((short)2, "directories"),
    SYMLINKS((short)3, "symlinks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILES
          return FILES;
        case 2: // DIRECTORIES
          return DIRECTORIES;
        case 3: // SYMLINKS
          return SYMLINKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FileNode"))));
    tmpMap.put(_Fields.DIRECTORIES, new org.apache.thrift.meta_data.FieldMetaData("directories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DirectoryNode"))));
    tmpMap.put(_Fields.SYMLINKS, new org.apache.thrift.meta_data.FieldMetaData("symlinks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SymlinkNode"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Directory.class, metaDataMap);
  }

  public Directory() {
  }

  public Directory(
    java.util.List<FileNode> files,
    java.util.List<DirectoryNode> directories,
    java.util.List<SymlinkNode> symlinks)
  {
    this();
    this.files = files;
    this.directories = directories;
    this.symlinks = symlinks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Directory(Directory other) {
    if (other.isSetFiles()) {
      java.util.List<FileNode> __this__files = new java.util.ArrayList<FileNode>(other.files.size());
      for (FileNode other_element : other.files) {
        __this__files.add(other_element);
      }
      this.files = __this__files;
    }
    if (other.isSetDirectories()) {
      java.util.List<DirectoryNode> __this__directories = new java.util.ArrayList<DirectoryNode>(other.directories.size());
      for (DirectoryNode other_element : other.directories) {
        __this__directories.add(other_element);
      }
      this.directories = __this__directories;
    }
    if (other.isSetSymlinks()) {
      java.util.List<SymlinkNode> __this__symlinks = new java.util.ArrayList<SymlinkNode>(other.symlinks.size());
      for (SymlinkNode other_element : other.symlinks) {
        __this__symlinks.add(other_element);
      }
      this.symlinks = __this__symlinks;
    }
  }

  public Directory deepCopy() {
    return new Directory(this);
  }

  @Override
  public void clear() {
    this.files = null;
    this.directories = null;
    this.symlinks = null;
  }

  public int getFilesSize() {
    return (this.files == null) ? 0 : this.files.size();
  }

  public java.util.Iterator<FileNode> getFilesIterator() {
    return (this.files == null) ? null : this.files.iterator();
  }

  public void addToFiles(FileNode elem) {
    if (this.files == null) {
      this.files = new java.util.ArrayList<FileNode>();
    }
    this.files.add(elem);
  }

  public java.util.List<FileNode> getFiles() {
    return this.files;
  }

  public Directory setFiles(java.util.List<FileNode> files) {
    this.files = files;
    return this;
  }

  public void unsetFiles() {
    this.files = null;
  }

  /** Returns true if field files is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean value) {
    if (!value) {
      this.files = null;
    }
  }

  public int getDirectoriesSize() {
    return (this.directories == null) ? 0 : this.directories.size();
  }

  public java.util.Iterator<DirectoryNode> getDirectoriesIterator() {
    return (this.directories == null) ? null : this.directories.iterator();
  }

  public void addToDirectories(DirectoryNode elem) {
    if (this.directories == null) {
      this.directories = new java.util.ArrayList<DirectoryNode>();
    }
    this.directories.add(elem);
  }

  public java.util.List<DirectoryNode> getDirectories() {
    return this.directories;
  }

  public Directory setDirectories(java.util.List<DirectoryNode> directories) {
    this.directories = directories;
    return this;
  }

  public void unsetDirectories() {
    this.directories = null;
  }

  /** Returns true if field directories is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectories() {
    return this.directories != null;
  }

  public void setDirectoriesIsSet(boolean value) {
    if (!value) {
      this.directories = null;
    }
  }

  public int getSymlinksSize() {
    return (this.symlinks == null) ? 0 : this.symlinks.size();
  }

  public java.util.Iterator<SymlinkNode> getSymlinksIterator() {
    return (this.symlinks == null) ? null : this.symlinks.iterator();
  }

  public void addToSymlinks(SymlinkNode elem) {
    if (this.symlinks == null) {
      this.symlinks = new java.util.ArrayList<SymlinkNode>();
    }
    this.symlinks.add(elem);
  }

  public java.util.List<SymlinkNode> getSymlinks() {
    return this.symlinks;
  }

  public Directory setSymlinks(java.util.List<SymlinkNode> symlinks) {
    this.symlinks = symlinks;
    return this;
  }

  public void unsetSymlinks() {
    this.symlinks = null;
  }

  /** Returns true if field symlinks is set (has been assigned a value) and false otherwise */
  public boolean isSetSymlinks() {
    return this.symlinks != null;
  }

  public void setSymlinksIsSet(boolean value) {
    if (!value) {
      this.symlinks = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((java.util.List<FileNode>)value);
      }
      break;

    case DIRECTORIES:
      if (value == null) {
        unsetDirectories();
      } else {
        setDirectories((java.util.List<DirectoryNode>)value);
      }
      break;

    case SYMLINKS:
      if (value == null) {
        unsetSymlinks();
      } else {
        setSymlinks((java.util.List<SymlinkNode>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILES:
      return getFiles();

    case DIRECTORIES:
      return getDirectories();

    case SYMLINKS:
      return getSymlinks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILES:
      return isSetFiles();
    case DIRECTORIES:
      return isSetDirectories();
    case SYMLINKS:
      return isSetSymlinks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Directory)
      return this.equals((Directory)that);
    return false;
  }

  public boolean equals(Directory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_files = true && this.isSetFiles();
    boolean that_present_files = true && that.isSetFiles();
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (!this.files.equals(that.files))
        return false;
    }

    boolean this_present_directories = true && this.isSetDirectories();
    boolean that_present_directories = true && that.isSetDirectories();
    if (this_present_directories || that_present_directories) {
      if (!(this_present_directories && that_present_directories))
        return false;
      if (!this.directories.equals(that.directories))
        return false;
    }

    boolean this_present_symlinks = true && this.isSetSymlinks();
    boolean that_present_symlinks = true && that.isSetSymlinks();
    if (this_present_symlinks || that_present_symlinks) {
      if (!(this_present_symlinks && that_present_symlinks))
        return false;
      if (!this.symlinks.equals(that.symlinks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFiles()) ? 131071 : 524287);
    if (isSetFiles())
      hashCode = hashCode * 8191 + files.hashCode();

    hashCode = hashCode * 8191 + ((isSetDirectories()) ? 131071 : 524287);
    if (isSetDirectories())
      hashCode = hashCode * 8191 + directories.hashCode();

    hashCode = hashCode * 8191 + ((isSetSymlinks()) ? 131071 : 524287);
    if (isSetSymlinks())
      hashCode = hashCode * 8191 + symlinks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Directory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDirectories()).compareTo(other.isSetDirectories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directories, other.directories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSymlinks()).compareTo(other.isSetSymlinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymlinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symlinks, other.symlinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Directory(");
    boolean first = true;

    sb.append("files:");
    if (this.files == null) {
      sb.append("null");
    } else {
      sb.append(this.files);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("directories:");
    if (this.directories == null) {
      sb.append("null");
    } else {
      sb.append(this.directories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("symlinks:");
    if (this.symlinks == null) {
      sb.append("null");
    } else {
      sb.append(this.symlinks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DirectoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DirectoryStandardScheme getScheme() {
      return new DirectoryStandardScheme();
    }
  }

  private static class DirectoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<Directory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Directory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.files = new java.util.ArrayList<FileNode>(_list0.size);
                FileNode _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FileNode();
                  _elem1.read(iprot);
                  struct.files.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.directories = new java.util.ArrayList<DirectoryNode>(_list3.size);
                DirectoryNode _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new DirectoryNode();
                  _elem4.read(iprot);
                  struct.directories.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDirectoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYMLINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.symlinks = new java.util.ArrayList<SymlinkNode>(_list6.size);
                SymlinkNode _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new SymlinkNode();
                  _elem7.read(iprot);
                  struct.symlinks.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setSymlinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Directory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.files != null) {
        oprot.writeFieldBegin(FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.files.size()));
          for (FileNode _iter9 : struct.files)
          {
            _iter9.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.directories != null) {
        oprot.writeFieldBegin(DIRECTORIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.directories.size()));
          for (DirectoryNode _iter10 : struct.directories)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.symlinks != null) {
        oprot.writeFieldBegin(SYMLINKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.symlinks.size()));
          for (SymlinkNode _iter11 : struct.symlinks)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DirectoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DirectoryTupleScheme getScheme() {
      return new DirectoryTupleScheme();
    }
  }

  private static class DirectoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<Directory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Directory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFiles()) {
        optionals.set(0);
      }
      if (struct.isSetDirectories()) {
        optionals.set(1);
      }
      if (struct.isSetSymlinks()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFiles()) {
        {
          oprot.writeI32(struct.files.size());
          for (FileNode _iter12 : struct.files)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetDirectories()) {
        {
          oprot.writeI32(struct.directories.size());
          for (DirectoryNode _iter13 : struct.directories)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetSymlinks()) {
        {
          oprot.writeI32(struct.symlinks.size());
          for (SymlinkNode _iter14 : struct.symlinks)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Directory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.files = new java.util.ArrayList<FileNode>(_list15.size);
          FileNode _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new FileNode();
            _elem16.read(iprot);
            struct.files.add(_elem16);
          }
        }
        struct.setFilesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.directories = new java.util.ArrayList<DirectoryNode>(_list18.size);
          DirectoryNode _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new DirectoryNode();
            _elem19.read(iprot);
            struct.directories.add(_elem19);
          }
        }
        struct.setDirectoriesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.symlinks = new java.util.ArrayList<SymlinkNode>(_list21.size);
          SymlinkNode _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new SymlinkNode();
            _elem22.read(iprot);
            struct.symlinks.add(_elem22);
          }
        }
        struct.setSymlinksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


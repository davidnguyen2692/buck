/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class ExecuteRequest implements org.apache.thrift.TBase<ExecuteRequest, ExecuteRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteRequest");

  private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instance_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SKIP_CACHE_LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_cache_lookup", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_id", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteRequestTupleSchemeFactory();

  public java.lang.String instance_name; // required
  public Action action; // required
  public boolean skip_cache_lookup; // required
  public java.lang.String execution_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_NAME((short)1, "instance_name"),
    ACTION((short)2, "action"),
    SKIP_CACHE_LOOKUP((short)3, "skip_cache_lookup"),
    EXECUTION_ID((short)4, "execution_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_NAME
          return INSTANCE_NAME;
        case 2: // ACTION
          return ACTION;
        case 3: // SKIP_CACHE_LOOKUP
          return SKIP_CACHE_LOOKUP;
        case 4: // EXECUTION_ID
          return EXECUTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKIP_CACHE_LOOKUP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXECUTION_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instance_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Action.class)));
    tmpMap.put(_Fields.SKIP_CACHE_LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("skip_cache_lookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("execution_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteRequest.class, metaDataMap);
  }

  public ExecuteRequest() {
  }

  public ExecuteRequest(
    java.lang.String instance_name,
    Action action,
    boolean skip_cache_lookup)
  {
    this();
    this.instance_name = instance_name;
    this.action = action;
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteRequest(ExecuteRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstance_name()) {
      this.instance_name = other.instance_name;
    }
    if (other.isSetAction()) {
      this.action = new Action(other.action);
    }
    this.skip_cache_lookup = other.skip_cache_lookup;
    if (other.isSetExecution_id()) {
      this.execution_id = other.execution_id;
    }
  }

  public ExecuteRequest deepCopy() {
    return new ExecuteRequest(this);
  }

  @Override
  public void clear() {
    this.instance_name = null;
    this.action = null;
    setSkip_cache_lookupIsSet(false);
    this.skip_cache_lookup = false;
    this.execution_id = null;
  }

  public java.lang.String getInstance_name() {
    return this.instance_name;
  }

  public ExecuteRequest setInstance_name(java.lang.String instance_name) {
    this.instance_name = instance_name;
    return this;
  }

  public void unsetInstance_name() {
    this.instance_name = null;
  }

  /** Returns true if field instance_name is set (has been assigned a value) and false otherwise */
  public boolean isSetInstance_name() {
    return this.instance_name != null;
  }

  public void setInstance_nameIsSet(boolean value) {
    if (!value) {
      this.instance_name = null;
    }
  }

  public Action getAction() {
    return this.action;
  }

  public ExecuteRequest setAction(Action action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public boolean isSkip_cache_lookup() {
    return this.skip_cache_lookup;
  }

  public ExecuteRequest setSkip_cache_lookup(boolean skip_cache_lookup) {
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    return this;
  }

  public void unsetSkip_cache_lookup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  /** Returns true if field skip_cache_lookup is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip_cache_lookup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  public void setSkip_cache_lookupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_CACHE_LOOKUP_ISSET_ID, value);
  }

  public java.lang.String getExecution_id() {
    return this.execution_id;
  }

  public ExecuteRequest setExecution_id(java.lang.String execution_id) {
    this.execution_id = execution_id;
    return this;
  }

  public void unsetExecution_id() {
    this.execution_id = null;
  }

  /** Returns true if field execution_id is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_id() {
    return this.execution_id != null;
  }

  public void setExecution_idIsSet(boolean value) {
    if (!value) {
      this.execution_id = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INSTANCE_NAME:
      if (value == null) {
        unsetInstance_name();
      } else {
        setInstance_name((java.lang.String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((Action)value);
      }
      break;

    case SKIP_CACHE_LOOKUP:
      if (value == null) {
        unsetSkip_cache_lookup();
      } else {
        setSkip_cache_lookup((java.lang.Boolean)value);
      }
      break;

    case EXECUTION_ID:
      if (value == null) {
        unsetExecution_id();
      } else {
        setExecution_id((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_NAME:
      return getInstance_name();

    case ACTION:
      return getAction();

    case SKIP_CACHE_LOOKUP:
      return isSkip_cache_lookup();

    case EXECUTION_ID:
      return getExecution_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_NAME:
      return isSetInstance_name();
    case ACTION:
      return isSetAction();
    case SKIP_CACHE_LOOKUP:
      return isSetSkip_cache_lookup();
    case EXECUTION_ID:
      return isSetExecution_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteRequest)
      return this.equals((ExecuteRequest)that);
    return false;
  }

  public boolean equals(ExecuteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_instance_name = true && this.isSetInstance_name();
    boolean that_present_instance_name = true && that.isSetInstance_name();
    if (this_present_instance_name || that_present_instance_name) {
      if (!(this_present_instance_name && that_present_instance_name))
        return false;
      if (!this.instance_name.equals(that.instance_name))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_skip_cache_lookup = true;
    boolean that_present_skip_cache_lookup = true;
    if (this_present_skip_cache_lookup || that_present_skip_cache_lookup) {
      if (!(this_present_skip_cache_lookup && that_present_skip_cache_lookup))
        return false;
      if (this.skip_cache_lookup != that.skip_cache_lookup)
        return false;
    }

    boolean this_present_execution_id = true && this.isSetExecution_id();
    boolean that_present_execution_id = true && that.isSetExecution_id();
    if (this_present_execution_id || that_present_execution_id) {
      if (!(this_present_execution_id && that_present_execution_id))
        return false;
      if (!this.execution_id.equals(that.execution_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInstance_name()) ? 131071 : 524287);
    if (isSetInstance_name())
      hashCode = hashCode * 8191 + instance_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + ((skip_cache_lookup) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExecution_id()) ? 131071 : 524287);
    if (isSetExecution_id())
      hashCode = hashCode * 8191 + execution_id.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExecuteRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInstance_name()).compareTo(other.isSetInstance_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstance_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance_name, other.instance_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkip_cache_lookup()).compareTo(other.isSetSkip_cache_lookup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip_cache_lookup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_cache_lookup, other.skip_cache_lookup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecution_id()).compareTo(other.isSetExecution_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_id, other.execution_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteRequest(");
    boolean first = true;

    sb.append("instance_name:");
    if (this.instance_name == null) {
      sb.append("null");
    } else {
      sb.append(this.instance_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skip_cache_lookup:");
    sb.append(this.skip_cache_lookup);
    first = false;
    if (isSetExecution_id()) {
      if (!first) sb.append(", ");
      sb.append("execution_id:");
      if (this.execution_id == null) {
        sb.append("null");
      } else {
        sb.append(this.execution_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (action != null) {
      action.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecuteRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExecuteRequestStandardScheme getScheme() {
      return new ExecuteRequestStandardScheme();
    }
  }

  private static class ExecuteRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instance_name = iprot.readString();
              struct.setInstance_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.action = new Action();
              struct.action.read(iprot);
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKIP_CACHE_LOOKUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip_cache_lookup = iprot.readBool();
              struct.setSkip_cache_lookupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execution_id = iprot.readString();
              struct.setExecution_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instance_name != null) {
        oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
        oprot.writeString(struct.instance_name);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        struct.action.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIP_CACHE_LOOKUP_FIELD_DESC);
      oprot.writeBool(struct.skip_cache_lookup);
      oprot.writeFieldEnd();
      if (struct.execution_id != null) {
        if (struct.isSetExecution_id()) {
          oprot.writeFieldBegin(EXECUTION_ID_FIELD_DESC);
          oprot.writeString(struct.execution_id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecuteRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExecuteRequestTupleScheme getScheme() {
      return new ExecuteRequestTupleScheme();
    }
  }

  private static class ExecuteRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInstance_name()) {
        optionals.set(0);
      }
      if (struct.isSetAction()) {
        optionals.set(1);
      }
      if (struct.isSetSkip_cache_lookup()) {
        optionals.set(2);
      }
      if (struct.isSetExecution_id()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInstance_name()) {
        oprot.writeString(struct.instance_name);
      }
      if (struct.isSetAction()) {
        struct.action.write(oprot);
      }
      if (struct.isSetSkip_cache_lookup()) {
        oprot.writeBool(struct.skip_cache_lookup);
      }
      if (struct.isSetExecution_id()) {
        oprot.writeString(struct.execution_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.instance_name = iprot.readString();
        struct.setInstance_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.action = new Action();
        struct.action.read(iprot);
        struct.setActionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.skip_cache_lookup = iprot.readBool();
        struct.setSkip_cache_lookupIsSet(true);
      }
      if (incoming.get(3)) {
        struct.execution_id = iprot.readString();
        struct.setExecution_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


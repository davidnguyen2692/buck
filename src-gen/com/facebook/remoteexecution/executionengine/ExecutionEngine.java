/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class ExecutionEngine {

  public interface Iface {

    public ExecuteResponse execute(ExecuteRequest request) throws ServiceOverloadedException, RejectedActionException, NonUniqueExecutionIdException, org.apache.thrift.TException;

    public GetExecutionStateResponse getExecutionState(GetExecutionStateRequest request) throws UnknownExecutionIdException, org.apache.thrift.TException;

    public CancelExecutionResponse cancelExecution(CancelExecutionRequest request) throws UnknownExecutionIdException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void execute(ExecuteRequest request, org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse> resultHandler) throws org.apache.thrift.TException;

    public void getExecutionState(GetExecutionStateRequest request, org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse> resultHandler) throws org.apache.thrift.TException;

    public void cancelExecution(CancelExecutionRequest request, org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ExecuteResponse execute(ExecuteRequest request) throws ServiceOverloadedException, RejectedActionException, NonUniqueExecutionIdException, org.apache.thrift.TException
    {
      send_execute(request);
      return recv_execute();
    }

    public void send_execute(ExecuteRequest request) throws org.apache.thrift.TException
    {
      execute_args args = new execute_args();
      args.setRequest(request);
      sendBase("execute", args);
    }

    public ExecuteResponse recv_execute() throws ServiceOverloadedException, RejectedActionException, NonUniqueExecutionIdException, org.apache.thrift.TException
    {
      execute_result result = new execute_result();
      receiveBase(result, "execute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.service_overloaded != null) {
        throw result.service_overloaded;
      }
      if (result.rejected_action != null) {
        throw result.rejected_action;
      }
      if (result.non_unique_execution_id != null) {
        throw result.non_unique_execution_id;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execute failed: unknown result");
    }

    public GetExecutionStateResponse getExecutionState(GetExecutionStateRequest request) throws UnknownExecutionIdException, org.apache.thrift.TException
    {
      send_getExecutionState(request);
      return recv_getExecutionState();
    }

    public void send_getExecutionState(GetExecutionStateRequest request) throws org.apache.thrift.TException
    {
      getExecutionState_args args = new getExecutionState_args();
      args.setRequest(request);
      sendBase("getExecutionState", args);
    }

    public GetExecutionStateResponse recv_getExecutionState() throws UnknownExecutionIdException, org.apache.thrift.TException
    {
      getExecutionState_result result = new getExecutionState_result();
      receiveBase(result, "getExecutionState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_execution_id != null) {
        throw result.unknown_execution_id;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExecutionState failed: unknown result");
    }

    public CancelExecutionResponse cancelExecution(CancelExecutionRequest request) throws UnknownExecutionIdException, org.apache.thrift.TException
    {
      send_cancelExecution(request);
      return recv_cancelExecution();
    }

    public void send_cancelExecution(CancelExecutionRequest request) throws org.apache.thrift.TException
    {
      cancelExecution_args args = new cancelExecution_args();
      args.setRequest(request);
      sendBase("cancelExecution", args);
    }

    public CancelExecutionResponse recv_cancelExecution() throws UnknownExecutionIdException, org.apache.thrift.TException
    {
      cancelExecution_result result = new cancelExecution_result();
      receiveBase(result, "cancelExecution");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_execution_id != null) {
        throw result.unknown_execution_id;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelExecution failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execute(ExecuteRequest request, org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execute_call method_call = new execute_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execute_call extends org.apache.thrift.async.TAsyncMethodCall<ExecuteResponse> {
      private ExecuteRequest request;
      public execute_call(ExecuteRequest request, org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execute_args args = new execute_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecuteResponse getResult() throws ServiceOverloadedException, RejectedActionException, NonUniqueExecutionIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execute();
      }
    }

    public void getExecutionState(GetExecutionStateRequest request, org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExecutionState_call method_call = new getExecutionState_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExecutionState_call extends org.apache.thrift.async.TAsyncMethodCall<GetExecutionStateResponse> {
      private GetExecutionStateRequest request;
      public getExecutionState_call(GetExecutionStateRequest request, org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExecutionState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExecutionState_args args = new getExecutionState_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetExecutionStateResponse getResult() throws UnknownExecutionIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExecutionState();
      }
    }

    public void cancelExecution(CancelExecutionRequest request, org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelExecution_call method_call = new cancelExecution_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelExecution_call extends org.apache.thrift.async.TAsyncMethodCall<CancelExecutionResponse> {
      private CancelExecutionRequest request;
      public cancelExecution_call(CancelExecutionRequest request, org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelExecution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelExecution_args args = new cancelExecution_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CancelExecutionResponse getResult() throws UnknownExecutionIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelExecution();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("execute", new execute());
      processMap.put("getExecutionState", new getExecutionState());
      processMap.put("cancelExecution", new cancelExecution());
      return processMap;
    }

    public static class execute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execute_args> {
      public execute() {
        super("execute");
      }

      public execute_args getEmptyArgsInstance() {
        return new execute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public execute_result getResult(I iface, execute_args args) throws org.apache.thrift.TException {
        execute_result result = new execute_result();
        try {
          result.success = iface.execute(args.request);
        } catch (ServiceOverloadedException service_overloaded) {
          result.service_overloaded = service_overloaded;
        } catch (RejectedActionException rejected_action) {
          result.rejected_action = rejected_action;
        } catch (NonUniqueExecutionIdException non_unique_execution_id) {
          result.non_unique_execution_id = non_unique_execution_id;
        }
        return result;
      }
    }

    public static class getExecutionState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExecutionState_args> {
      public getExecutionState() {
        super("getExecutionState");
      }

      public getExecutionState_args getEmptyArgsInstance() {
        return new getExecutionState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExecutionState_result getResult(I iface, getExecutionState_args args) throws org.apache.thrift.TException {
        getExecutionState_result result = new getExecutionState_result();
        try {
          result.success = iface.getExecutionState(args.request);
        } catch (UnknownExecutionIdException unknown_execution_id) {
          result.unknown_execution_id = unknown_execution_id;
        }
        return result;
      }
    }

    public static class cancelExecution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelExecution_args> {
      public cancelExecution() {
        super("cancelExecution");
      }

      public cancelExecution_args getEmptyArgsInstance() {
        return new cancelExecution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelExecution_result getResult(I iface, cancelExecution_args args) throws org.apache.thrift.TException {
        cancelExecution_result result = new cancelExecution_result();
        try {
          result.success = iface.cancelExecution(args.request);
        } catch (UnknownExecutionIdException unknown_execution_id) {
          result.unknown_execution_id = unknown_execution_id;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("execute", new execute());
      processMap.put("getExecutionState", new getExecutionState());
      processMap.put("cancelExecution", new cancelExecution());
      return processMap;
    }

    public static class execute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execute_args, ExecuteResponse> {
      public execute() {
        super("execute");
      }

      public execute_args getEmptyArgsInstance() {
        return new execute_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse>() { 
          public void onComplete(ExecuteResponse o) {
            execute_result result = new execute_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execute_result result = new execute_result();
            if (e instanceof ServiceOverloadedException) {
              result.service_overloaded = (ServiceOverloadedException) e;
              result.setService_overloadedIsSet(true);
              msg = result;
            } else if (e instanceof RejectedActionException) {
              result.rejected_action = (RejectedActionException) e;
              result.setRejected_actionIsSet(true);
              msg = result;
            } else if (e instanceof NonUniqueExecutionIdException) {
              result.non_unique_execution_id = (NonUniqueExecutionIdException) e;
              result.setNon_unique_execution_idIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execute_args args, org.apache.thrift.async.AsyncMethodCallback<ExecuteResponse> resultHandler) throws org.apache.thrift.TException {
        iface.execute(args.request,resultHandler);
      }
    }

    public static class getExecutionState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExecutionState_args, GetExecutionStateResponse> {
      public getExecutionState() {
        super("getExecutionState");
      }

      public getExecutionState_args getEmptyArgsInstance() {
        return new getExecutionState_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse>() { 
          public void onComplete(GetExecutionStateResponse o) {
            getExecutionState_result result = new getExecutionState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExecutionState_result result = new getExecutionState_result();
            if (e instanceof UnknownExecutionIdException) {
              result.unknown_execution_id = (UnknownExecutionIdException) e;
              result.setUnknown_execution_idIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExecutionState_args args, org.apache.thrift.async.AsyncMethodCallback<GetExecutionStateResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getExecutionState(args.request,resultHandler);
      }
    }

    public static class cancelExecution<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelExecution_args, CancelExecutionResponse> {
      public cancelExecution() {
        super("cancelExecution");
      }

      public cancelExecution_args getEmptyArgsInstance() {
        return new cancelExecution_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse>() { 
          public void onComplete(CancelExecutionResponse o) {
            cancelExecution_result result = new cancelExecution_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancelExecution_result result = new cancelExecution_result();
            if (e instanceof UnknownExecutionIdException) {
              result.unknown_execution_id = (UnknownExecutionIdException) e;
              result.setUnknown_execution_idIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelExecution_args args, org.apache.thrift.async.AsyncMethodCallback<CancelExecutionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.cancelExecution(args.request,resultHandler);
      }
    }

  }

  public static class execute_args implements org.apache.thrift.TBase<execute_args, execute_args._Fields>, java.io.Serializable, Cloneable, Comparable<execute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execute_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execute_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execute_argsTupleSchemeFactory();

    public ExecuteRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execute_args.class, metaDataMap);
    }

    public execute_args() {
    }

    public execute_args(
      ExecuteRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_args(execute_args other) {
      if (other.isSetRequest()) {
        this.request = new ExecuteRequest(other.request);
      }
    }

    public execute_args deepCopy() {
      return new execute_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ExecuteRequest getRequest() {
      return this.request;
    }

    public execute_args setRequest(ExecuteRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ExecuteRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_args)
        return this.equals((execute_args)that);
      return false;
    }

    public boolean equals(execute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execute_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execute_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execute_argsStandardScheme getScheme() {
        return new execute_argsStandardScheme();
      }
    }

    private static class execute_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ExecuteRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execute_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execute_argsTupleScheme getScheme() {
        return new execute_argsTupleScheme();
      }
    }

    private static class execute_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ExecuteRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execute_result implements org.apache.thrift.TBase<execute_result, execute_result._Fields>, java.io.Serializable, Cloneable, Comparable<execute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_OVERLOADED_FIELD_DESC = new org.apache.thrift.protocol.TField("service_overloaded", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REJECTED_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_action", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NON_UNIQUE_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("non_unique_execution_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execute_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execute_resultTupleSchemeFactory();

    public ExecuteResponse success; // required
    public ServiceOverloadedException service_overloaded; // required
    public RejectedActionException rejected_action; // required
    public NonUniqueExecutionIdException non_unique_execution_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_OVERLOADED((short)1, "service_overloaded"),
      REJECTED_ACTION((short)2, "rejected_action"),
      NON_UNIQUE_EXECUTION_ID((short)3, "non_unique_execution_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_OVERLOADED
            return SERVICE_OVERLOADED;
          case 2: // REJECTED_ACTION
            return REJECTED_ACTION;
          case 3: // NON_UNIQUE_EXECUTION_ID
            return NON_UNIQUE_EXECUTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteResponse.class)));
      tmpMap.put(_Fields.SERVICE_OVERLOADED, new org.apache.thrift.meta_data.FieldMetaData("service_overloaded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceOverloadedException.class)));
      tmpMap.put(_Fields.REJECTED_ACTION, new org.apache.thrift.meta_data.FieldMetaData("rejected_action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RejectedActionException.class)));
      tmpMap.put(_Fields.NON_UNIQUE_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("non_unique_execution_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NonUniqueExecutionIdException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execute_result.class, metaDataMap);
    }

    public execute_result() {
    }

    public execute_result(
      ExecuteResponse success,
      ServiceOverloadedException service_overloaded,
      RejectedActionException rejected_action,
      NonUniqueExecutionIdException non_unique_execution_id)
    {
      this();
      this.success = success;
      this.service_overloaded = service_overloaded;
      this.rejected_action = rejected_action;
      this.non_unique_execution_id = non_unique_execution_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_result(execute_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExecuteResponse(other.success);
      }
      if (other.isSetService_overloaded()) {
        this.service_overloaded = new ServiceOverloadedException(other.service_overloaded);
      }
      if (other.isSetRejected_action()) {
        this.rejected_action = new RejectedActionException(other.rejected_action);
      }
      if (other.isSetNon_unique_execution_id()) {
        this.non_unique_execution_id = new NonUniqueExecutionIdException(other.non_unique_execution_id);
      }
    }

    public execute_result deepCopy() {
      return new execute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.service_overloaded = null;
      this.rejected_action = null;
      this.non_unique_execution_id = null;
    }

    public ExecuteResponse getSuccess() {
      return this.success;
    }

    public execute_result setSuccess(ExecuteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceOverloadedException getService_overloaded() {
      return this.service_overloaded;
    }

    public execute_result setService_overloaded(ServiceOverloadedException service_overloaded) {
      this.service_overloaded = service_overloaded;
      return this;
    }

    public void unsetService_overloaded() {
      this.service_overloaded = null;
    }

    /** Returns true if field service_overloaded is set (has been assigned a value) and false otherwise */
    public boolean isSetService_overloaded() {
      return this.service_overloaded != null;
    }

    public void setService_overloadedIsSet(boolean value) {
      if (!value) {
        this.service_overloaded = null;
      }
    }

    public RejectedActionException getRejected_action() {
      return this.rejected_action;
    }

    public execute_result setRejected_action(RejectedActionException rejected_action) {
      this.rejected_action = rejected_action;
      return this;
    }

    public void unsetRejected_action() {
      this.rejected_action = null;
    }

    /** Returns true if field rejected_action is set (has been assigned a value) and false otherwise */
    public boolean isSetRejected_action() {
      return this.rejected_action != null;
    }

    public void setRejected_actionIsSet(boolean value) {
      if (!value) {
        this.rejected_action = null;
      }
    }

    public NonUniqueExecutionIdException getNon_unique_execution_id() {
      return this.non_unique_execution_id;
    }

    public execute_result setNon_unique_execution_id(NonUniqueExecutionIdException non_unique_execution_id) {
      this.non_unique_execution_id = non_unique_execution_id;
      return this;
    }

    public void unsetNon_unique_execution_id() {
      this.non_unique_execution_id = null;
    }

    /** Returns true if field non_unique_execution_id is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_unique_execution_id() {
      return this.non_unique_execution_id != null;
    }

    public void setNon_unique_execution_idIsSet(boolean value) {
      if (!value) {
        this.non_unique_execution_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecuteResponse)value);
        }
        break;

      case SERVICE_OVERLOADED:
        if (value == null) {
          unsetService_overloaded();
        } else {
          setService_overloaded((ServiceOverloadedException)value);
        }
        break;

      case REJECTED_ACTION:
        if (value == null) {
          unsetRejected_action();
        } else {
          setRejected_action((RejectedActionException)value);
        }
        break;

      case NON_UNIQUE_EXECUTION_ID:
        if (value == null) {
          unsetNon_unique_execution_id();
        } else {
          setNon_unique_execution_id((NonUniqueExecutionIdException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_OVERLOADED:
        return getService_overloaded();

      case REJECTED_ACTION:
        return getRejected_action();

      case NON_UNIQUE_EXECUTION_ID:
        return getNon_unique_execution_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_OVERLOADED:
        return isSetService_overloaded();
      case REJECTED_ACTION:
        return isSetRejected_action();
      case NON_UNIQUE_EXECUTION_ID:
        return isSetNon_unique_execution_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_result)
        return this.equals((execute_result)that);
      return false;
    }

    public boolean equals(execute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_service_overloaded = true && this.isSetService_overloaded();
      boolean that_present_service_overloaded = true && that.isSetService_overloaded();
      if (this_present_service_overloaded || that_present_service_overloaded) {
        if (!(this_present_service_overloaded && that_present_service_overloaded))
          return false;
        if (!this.service_overloaded.equals(that.service_overloaded))
          return false;
      }

      boolean this_present_rejected_action = true && this.isSetRejected_action();
      boolean that_present_rejected_action = true && that.isSetRejected_action();
      if (this_present_rejected_action || that_present_rejected_action) {
        if (!(this_present_rejected_action && that_present_rejected_action))
          return false;
        if (!this.rejected_action.equals(that.rejected_action))
          return false;
      }

      boolean this_present_non_unique_execution_id = true && this.isSetNon_unique_execution_id();
      boolean that_present_non_unique_execution_id = true && that.isSetNon_unique_execution_id();
      if (this_present_non_unique_execution_id || that_present_non_unique_execution_id) {
        if (!(this_present_non_unique_execution_id && that_present_non_unique_execution_id))
          return false;
        if (!this.non_unique_execution_id.equals(that.non_unique_execution_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetService_overloaded()) ? 131071 : 524287);
      if (isSetService_overloaded())
        hashCode = hashCode * 8191 + service_overloaded.hashCode();

      hashCode = hashCode * 8191 + ((isSetRejected_action()) ? 131071 : 524287);
      if (isSetRejected_action())
        hashCode = hashCode * 8191 + rejected_action.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_unique_execution_id()) ? 131071 : 524287);
      if (isSetNon_unique_execution_id())
        hashCode = hashCode * 8191 + non_unique_execution_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetService_overloaded()).compareTo(other.isSetService_overloaded());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetService_overloaded()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_overloaded, other.service_overloaded);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRejected_action()).compareTo(other.isSetRejected_action());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRejected_action()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_action, other.rejected_action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_unique_execution_id()).compareTo(other.isSetNon_unique_execution_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_unique_execution_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_unique_execution_id, other.non_unique_execution_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("service_overloaded:");
      if (this.service_overloaded == null) {
        sb.append("null");
      } else {
        sb.append(this.service_overloaded);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rejected_action:");
      if (this.rejected_action == null) {
        sb.append("null");
      } else {
        sb.append(this.rejected_action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_unique_execution_id:");
      if (this.non_unique_execution_id == null) {
        sb.append("null");
      } else {
        sb.append(this.non_unique_execution_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execute_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execute_resultStandardScheme getScheme() {
        return new execute_resultStandardScheme();
      }
    }

    private static class execute_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExecuteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_OVERLOADED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.service_overloaded = new ServiceOverloadedException();
                struct.service_overloaded.read(iprot);
                struct.setService_overloadedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REJECTED_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rejected_action = new RejectedActionException();
                struct.rejected_action.read(iprot);
                struct.setRejected_actionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_UNIQUE_EXECUTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.non_unique_execution_id = new NonUniqueExecutionIdException();
                struct.non_unique_execution_id.read(iprot);
                struct.setNon_unique_execution_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.service_overloaded != null) {
          oprot.writeFieldBegin(SERVICE_OVERLOADED_FIELD_DESC);
          struct.service_overloaded.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rejected_action != null) {
          oprot.writeFieldBegin(REJECTED_ACTION_FIELD_DESC);
          struct.rejected_action.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.non_unique_execution_id != null) {
          oprot.writeFieldBegin(NON_UNIQUE_EXECUTION_ID_FIELD_DESC);
          struct.non_unique_execution_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execute_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execute_resultTupleScheme getScheme() {
        return new execute_resultTupleScheme();
      }
    }

    private static class execute_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetService_overloaded()) {
          optionals.set(1);
        }
        if (struct.isSetRejected_action()) {
          optionals.set(2);
        }
        if (struct.isSetNon_unique_execution_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetService_overloaded()) {
          struct.service_overloaded.write(oprot);
        }
        if (struct.isSetRejected_action()) {
          struct.rejected_action.write(oprot);
        }
        if (struct.isSetNon_unique_execution_id()) {
          struct.non_unique_execution_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new ExecuteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.service_overloaded = new ServiceOverloadedException();
          struct.service_overloaded.read(iprot);
          struct.setService_overloadedIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rejected_action = new RejectedActionException();
          struct.rejected_action.read(iprot);
          struct.setRejected_actionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.non_unique_execution_id = new NonUniqueExecutionIdException();
          struct.non_unique_execution_id.read(iprot);
          struct.setNon_unique_execution_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExecutionState_args implements org.apache.thrift.TBase<getExecutionState_args, getExecutionState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExecutionState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExecutionState_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExecutionState_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExecutionState_argsTupleSchemeFactory();

    public GetExecutionStateRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetExecutionStateRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExecutionState_args.class, metaDataMap);
    }

    public getExecutionState_args() {
    }

    public getExecutionState_args(
      GetExecutionStateRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExecutionState_args(getExecutionState_args other) {
      if (other.isSetRequest()) {
        this.request = new GetExecutionStateRequest(other.request);
      }
    }

    public getExecutionState_args deepCopy() {
      return new getExecutionState_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public GetExecutionStateRequest getRequest() {
      return this.request;
    }

    public getExecutionState_args setRequest(GetExecutionStateRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((GetExecutionStateRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getExecutionState_args)
        return this.equals((getExecutionState_args)that);
      return false;
    }

    public boolean equals(getExecutionState_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExecutionState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExecutionState_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExecutionState_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExecutionState_argsStandardScheme getScheme() {
        return new getExecutionState_argsStandardScheme();
      }
    }

    private static class getExecutionState_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExecutionState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExecutionState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new GetExecutionStateRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExecutionState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExecutionState_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExecutionState_argsTupleScheme getScheme() {
        return new getExecutionState_argsTupleScheme();
      }
    }

    private static class getExecutionState_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExecutionState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExecutionState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExecutionState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new GetExecutionStateRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExecutionState_result implements org.apache.thrift.TBase<getExecutionState_result, getExecutionState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExecutionState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExecutionState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_execution_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExecutionState_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExecutionState_resultTupleSchemeFactory();

    public GetExecutionStateResponse success; // required
    public UnknownExecutionIdException unknown_execution_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_EXECUTION_ID((short)1, "unknown_execution_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_EXECUTION_ID
            return UNKNOWN_EXECUTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetExecutionStateResponse.class)));
      tmpMap.put(_Fields.UNKNOWN_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("unknown_execution_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownExecutionIdException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExecutionState_result.class, metaDataMap);
    }

    public getExecutionState_result() {
    }

    public getExecutionState_result(
      GetExecutionStateResponse success,
      UnknownExecutionIdException unknown_execution_id)
    {
      this();
      this.success = success;
      this.unknown_execution_id = unknown_execution_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExecutionState_result(getExecutionState_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetExecutionStateResponse(other.success);
      }
      if (other.isSetUnknown_execution_id()) {
        this.unknown_execution_id = new UnknownExecutionIdException(other.unknown_execution_id);
      }
    }

    public getExecutionState_result deepCopy() {
      return new getExecutionState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_execution_id = null;
    }

    public GetExecutionStateResponse getSuccess() {
      return this.success;
    }

    public getExecutionState_result setSuccess(GetExecutionStateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownExecutionIdException getUnknown_execution_id() {
      return this.unknown_execution_id;
    }

    public getExecutionState_result setUnknown_execution_id(UnknownExecutionIdException unknown_execution_id) {
      this.unknown_execution_id = unknown_execution_id;
      return this;
    }

    public void unsetUnknown_execution_id() {
      this.unknown_execution_id = null;
    }

    /** Returns true if field unknown_execution_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_execution_id() {
      return this.unknown_execution_id != null;
    }

    public void setUnknown_execution_idIsSet(boolean value) {
      if (!value) {
        this.unknown_execution_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetExecutionStateResponse)value);
        }
        break;

      case UNKNOWN_EXECUTION_ID:
        if (value == null) {
          unsetUnknown_execution_id();
        } else {
          setUnknown_execution_id((UnknownExecutionIdException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_EXECUTION_ID:
        return getUnknown_execution_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_EXECUTION_ID:
        return isSetUnknown_execution_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getExecutionState_result)
        return this.equals((getExecutionState_result)that);
      return false;
    }

    public boolean equals(getExecutionState_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_execution_id = true && this.isSetUnknown_execution_id();
      boolean that_present_unknown_execution_id = true && that.isSetUnknown_execution_id();
      if (this_present_unknown_execution_id || that_present_unknown_execution_id) {
        if (!(this_present_unknown_execution_id && that_present_unknown_execution_id))
          return false;
        if (!this.unknown_execution_id.equals(that.unknown_execution_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnknown_execution_id()) ? 131071 : 524287);
      if (isSetUnknown_execution_id())
        hashCode = hashCode * 8191 + unknown_execution_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExecutionState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknown_execution_id()).compareTo(other.isSetUnknown_execution_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_execution_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_execution_id, other.unknown_execution_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExecutionState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_execution_id:");
      if (this.unknown_execution_id == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_execution_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExecutionState_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExecutionState_resultStandardScheme getScheme() {
        return new getExecutionState_resultStandardScheme();
      }
    }

    private static class getExecutionState_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExecutionState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExecutionState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetExecutionStateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_EXECUTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_execution_id = new UnknownExecutionIdException();
                struct.unknown_execution_id.read(iprot);
                struct.setUnknown_execution_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExecutionState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_execution_id != null) {
          oprot.writeFieldBegin(UNKNOWN_EXECUTION_ID_FIELD_DESC);
          struct.unknown_execution_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExecutionState_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExecutionState_resultTupleScheme getScheme() {
        return new getExecutionState_resultTupleScheme();
      }
    }

    private static class getExecutionState_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExecutionState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExecutionState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_execution_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_execution_id()) {
          struct.unknown_execution_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExecutionState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GetExecutionStateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_execution_id = new UnknownExecutionIdException();
          struct.unknown_execution_id.read(iprot);
          struct.setUnknown_execution_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelExecution_args implements org.apache.thrift.TBase<cancelExecution_args, cancelExecution_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecution_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecution_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelExecution_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelExecution_argsTupleSchemeFactory();

    public CancelExecutionRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelExecutionRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecution_args.class, metaDataMap);
    }

    public cancelExecution_args() {
    }

    public cancelExecution_args(
      CancelExecutionRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecution_args(cancelExecution_args other) {
      if (other.isSetRequest()) {
        this.request = new CancelExecutionRequest(other.request);
      }
    }

    public cancelExecution_args deepCopy() {
      return new cancelExecution_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public CancelExecutionRequest getRequest() {
      return this.request;
    }

    public cancelExecution_args setRequest(CancelExecutionRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((CancelExecutionRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecution_args)
        return this.equals((cancelExecution_args)that);
      return false;
    }

    public boolean equals(cancelExecution_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelExecution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelExecution_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecution_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelExecution_argsStandardScheme getScheme() {
        return new cancelExecution_argsStandardScheme();
      }
    }

    private static class cancelExecution_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelExecution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new CancelExecutionRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecution_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelExecution_argsTupleScheme getScheme() {
        return new cancelExecution_argsTupleScheme();
      }
    }

    private static class cancelExecution_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelExecution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new CancelExecutionRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelExecution_result implements org.apache.thrift.TBase<cancelExecution_result, cancelExecution_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelExecution_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelExecution_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_execution_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelExecution_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelExecution_resultTupleSchemeFactory();

    public CancelExecutionResponse success; // required
    public UnknownExecutionIdException unknown_execution_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_EXECUTION_ID((short)1, "unknown_execution_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_EXECUTION_ID
            return UNKNOWN_EXECUTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelExecutionResponse.class)));
      tmpMap.put(_Fields.UNKNOWN_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("unknown_execution_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnknownExecutionIdException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelExecution_result.class, metaDataMap);
    }

    public cancelExecution_result() {
    }

    public cancelExecution_result(
      CancelExecutionResponse success,
      UnknownExecutionIdException unknown_execution_id)
    {
      this();
      this.success = success;
      this.unknown_execution_id = unknown_execution_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelExecution_result(cancelExecution_result other) {
      if (other.isSetSuccess()) {
        this.success = new CancelExecutionResponse(other.success);
      }
      if (other.isSetUnknown_execution_id()) {
        this.unknown_execution_id = new UnknownExecutionIdException(other.unknown_execution_id);
      }
    }

    public cancelExecution_result deepCopy() {
      return new cancelExecution_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_execution_id = null;
    }

    public CancelExecutionResponse getSuccess() {
      return this.success;
    }

    public cancelExecution_result setSuccess(CancelExecutionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownExecutionIdException getUnknown_execution_id() {
      return this.unknown_execution_id;
    }

    public cancelExecution_result setUnknown_execution_id(UnknownExecutionIdException unknown_execution_id) {
      this.unknown_execution_id = unknown_execution_id;
      return this;
    }

    public void unsetUnknown_execution_id() {
      this.unknown_execution_id = null;
    }

    /** Returns true if field unknown_execution_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_execution_id() {
      return this.unknown_execution_id != null;
    }

    public void setUnknown_execution_idIsSet(boolean value) {
      if (!value) {
        this.unknown_execution_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CancelExecutionResponse)value);
        }
        break;

      case UNKNOWN_EXECUTION_ID:
        if (value == null) {
          unsetUnknown_execution_id();
        } else {
          setUnknown_execution_id((UnknownExecutionIdException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_EXECUTION_ID:
        return getUnknown_execution_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_EXECUTION_ID:
        return isSetUnknown_execution_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelExecution_result)
        return this.equals((cancelExecution_result)that);
      return false;
    }

    public boolean equals(cancelExecution_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_execution_id = true && this.isSetUnknown_execution_id();
      boolean that_present_unknown_execution_id = true && that.isSetUnknown_execution_id();
      if (this_present_unknown_execution_id || that_present_unknown_execution_id) {
        if (!(this_present_unknown_execution_id && that_present_unknown_execution_id))
          return false;
        if (!this.unknown_execution_id.equals(that.unknown_execution_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnknown_execution_id()) ? 131071 : 524287);
      if (isSetUnknown_execution_id())
        hashCode = hashCode * 8191 + unknown_execution_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelExecution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnknown_execution_id()).compareTo(other.isSetUnknown_execution_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_execution_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_execution_id, other.unknown_execution_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelExecution_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_execution_id:");
      if (this.unknown_execution_id == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_execution_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelExecution_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelExecution_resultStandardScheme getScheme() {
        return new cancelExecution_resultStandardScheme();
      }
    }

    private static class cancelExecution_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelExecution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CancelExecutionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_EXECUTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_execution_id = new UnknownExecutionIdException();
                struct.unknown_execution_id.read(iprot);
                struct.setUnknown_execution_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelExecution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_execution_id != null) {
          oprot.writeFieldBegin(UNKNOWN_EXECUTION_ID_FIELD_DESC);
          struct.unknown_execution_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelExecution_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelExecution_resultTupleScheme getScheme() {
        return new cancelExecution_resultTupleScheme();
      }
    }

    private static class cancelExecution_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelExecution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_execution_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_execution_id()) {
          struct.unknown_execution_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CancelExecutionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_execution_id = new UnknownExecutionIdException();
          struct.unknown_execution_id.read(iprot);
          struct.setUnknown_execution_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class OutputFile implements org.apache.thrift.TBase<OutputFile, OutputFile._Fields>, java.io.Serializable, Cloneable, Comparable<OutputFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputFile");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("data_digest", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_executable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OutputFileStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OutputFileTupleSchemeFactory();

  public java.lang.String path; // required
  public com.facebook.remoteexecution.cas.Digest data_digest; // required
  public boolean is_executable; // required
  public java.nio.ByteBuffer content; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    DATA_DIGEST((short)2, "data_digest"),
    IS_EXECUTABLE((short)3, "is_executable"),
    CONTENT((short)4, "content");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // DATA_DIGEST
          return DATA_DIGEST;
        case 3: // IS_EXECUTABLE
          return IS_EXECUTABLE;
        case 4: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_EXECUTABLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONTENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_DIGEST, new org.apache.thrift.meta_data.FieldMetaData("data_digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.facebook.remoteexecution.cas.Digest.class)));
    tmpMap.put(_Fields.IS_EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("is_executable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OutputFile.class, metaDataMap);
  }

  public OutputFile() {
  }

  public OutputFile(
    java.lang.String path,
    com.facebook.remoteexecution.cas.Digest data_digest,
    boolean is_executable)
  {
    this();
    this.path = path;
    this.data_digest = data_digest;
    this.is_executable = is_executable;
    setIs_executableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OutputFile(OutputFile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetData_digest()) {
      this.data_digest = new com.facebook.remoteexecution.cas.Digest(other.data_digest);
    }
    this.is_executable = other.is_executable;
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
  }

  public OutputFile deepCopy() {
    return new OutputFile(this);
  }

  @Override
  public void clear() {
    this.path = null;
    this.data_digest = null;
    setIs_executableIsSet(false);
    this.is_executable = false;
    this.content = null;
  }

  public java.lang.String getPath() {
    return this.path;
  }

  public OutputFile setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public com.facebook.remoteexecution.cas.Digest getData_digest() {
    return this.data_digest;
  }

  public OutputFile setData_digest(com.facebook.remoteexecution.cas.Digest data_digest) {
    this.data_digest = data_digest;
    return this;
  }

  public void unsetData_digest() {
    this.data_digest = null;
  }

  /** Returns true if field data_digest is set (has been assigned a value) and false otherwise */
  public boolean isSetData_digest() {
    return this.data_digest != null;
  }

  public void setData_digestIsSet(boolean value) {
    if (!value) {
      this.data_digest = null;
    }
  }

  public boolean isIs_executable() {
    return this.is_executable;
  }

  public OutputFile setIs_executable(boolean is_executable) {
    this.is_executable = is_executable;
    setIs_executableIsSet(true);
    return this;
  }

  public void unsetIs_executable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_EXECUTABLE_ISSET_ID);
  }

  /** Returns true if field is_executable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_executable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_EXECUTABLE_ISSET_ID);
  }

  public void setIs_executableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_EXECUTABLE_ISSET_ID, value);
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public OutputFile setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(content.clone());
    return this;
  }

  public OutputFile setContent(java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case DATA_DIGEST:
      if (value == null) {
        unsetData_digest();
      } else {
        setData_digest((com.facebook.remoteexecution.cas.Digest)value);
      }
      break;

    case IS_EXECUTABLE:
      if (value == null) {
        unsetIs_executable();
      } else {
        setIs_executable((java.lang.Boolean)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case DATA_DIGEST:
      return getData_digest();

    case IS_EXECUTABLE:
      return isIs_executable();

    case CONTENT:
      return getContent();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case DATA_DIGEST:
      return isSetData_digest();
    case IS_EXECUTABLE:
      return isSetIs_executable();
    case CONTENT:
      return isSetContent();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OutputFile)
      return this.equals((OutputFile)that);
    return false;
  }

  public boolean equals(OutputFile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_data_digest = true && this.isSetData_digest();
    boolean that_present_data_digest = true && that.isSetData_digest();
    if (this_present_data_digest || that_present_data_digest) {
      if (!(this_present_data_digest && that_present_data_digest))
        return false;
      if (!this.data_digest.equals(that.data_digest))
        return false;
    }

    boolean this_present_is_executable = true;
    boolean that_present_is_executable = true;
    if (this_present_is_executable || that_present_is_executable) {
      if (!(this_present_is_executable && that_present_is_executable))
        return false;
      if (this.is_executable != that.is_executable)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_digest()) ? 131071 : 524287);
    if (isSetData_digest())
      hashCode = hashCode * 8191 + data_digest.hashCode();

    hashCode = hashCode * 8191 + ((is_executable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OutputFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData_digest()).compareTo(other.isSetData_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_digest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_digest, other.data_digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_executable()).compareTo(other.isSetIs_executable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_executable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_executable, other.is_executable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OutputFile(");
    boolean first = true;

    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_digest:");
    if (this.data_digest == null) {
      sb.append("null");
    } else {
      sb.append(this.data_digest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_executable:");
    sb.append(this.is_executable);
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (data_digest != null) {
      data_digest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OutputFileStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OutputFileStandardScheme getScheme() {
      return new OutputFileStandardScheme();
    }
  }

  private static class OutputFileStandardScheme extends org.apache.thrift.scheme.StandardScheme<OutputFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OutputFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_digest = new com.facebook.remoteexecution.cas.Digest();
              struct.data_digest.read(iprot);
              struct.setData_digestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_EXECUTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_executable = iprot.readBool();
              struct.setIs_executableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OutputFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.data_digest != null) {
        oprot.writeFieldBegin(DATA_DIGEST_FIELD_DESC);
        struct.data_digest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EXECUTABLE_FIELD_DESC);
      oprot.writeBool(struct.is_executable);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OutputFileTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OutputFileTupleScheme getScheme() {
      return new OutputFileTupleScheme();
    }
  }

  private static class OutputFileTupleScheme extends org.apache.thrift.scheme.TupleScheme<OutputFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OutputFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPath()) {
        optionals.set(0);
      }
      if (struct.isSetData_digest()) {
        optionals.set(1);
      }
      if (struct.isSetIs_executable()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetData_digest()) {
        struct.data_digest.write(oprot);
      }
      if (struct.isSetIs_executable()) {
        oprot.writeBool(struct.is_executable);
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OutputFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.data_digest = new com.facebook.remoteexecution.cas.Digest();
        struct.data_digest.read(iprot);
        struct.setData_digestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_executable = iprot.readBool();
        struct.setIs_executableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


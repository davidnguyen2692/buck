/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class RequiredWorkerHost implements org.apache.thrift.TBase<RequiredWorkerHost, RequiredWorkerHost._Fields>, java.io.Serializable, Cloneable, Comparable<RequiredWorkerHost> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequiredWorkerHost");

  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("devices", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequiredWorkerHostStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequiredWorkerHostTupleSchemeFactory();

  public java.util.List<Property> properties; // required
  public java.util.List<Resource> resources; // required
  public java.util.List<RequiredDevice> devices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTIES((short)1, "properties"),
    RESOURCES((short)2, "resources"),
    DEVICES((short)3, "devices");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTIES
          return PROPERTIES;
        case 2: // RESOURCES
          return RESOURCES;
        case 3: // DEVICES
          return DEVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Property.class))));
    tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resource.class))));
    tmpMap.put(_Fields.DEVICES, new org.apache.thrift.meta_data.FieldMetaData("devices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequiredDevice.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequiredWorkerHost.class, metaDataMap);
  }

  public RequiredWorkerHost() {
  }

  public RequiredWorkerHost(
    java.util.List<Property> properties,
    java.util.List<Resource> resources,
    java.util.List<RequiredDevice> devices)
  {
    this();
    this.properties = properties;
    this.resources = resources;
    this.devices = devices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequiredWorkerHost(RequiredWorkerHost other) {
    if (other.isSetProperties()) {
      java.util.List<Property> __this__properties = new java.util.ArrayList<Property>(other.properties.size());
      for (Property other_element : other.properties) {
        __this__properties.add(new Property(other_element));
      }
      this.properties = __this__properties;
    }
    if (other.isSetResources()) {
      java.util.List<Resource> __this__resources = new java.util.ArrayList<Resource>(other.resources.size());
      for (Resource other_element : other.resources) {
        __this__resources.add(new Resource(other_element));
      }
      this.resources = __this__resources;
    }
    if (other.isSetDevices()) {
      java.util.List<RequiredDevice> __this__devices = new java.util.ArrayList<RequiredDevice>(other.devices.size());
      for (RequiredDevice other_element : other.devices) {
        __this__devices.add(new RequiredDevice(other_element));
      }
      this.devices = __this__devices;
    }
  }

  public RequiredWorkerHost deepCopy() {
    return new RequiredWorkerHost(this);
  }

  @Override
  public void clear() {
    this.properties = null;
    this.resources = null;
    this.devices = null;
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public java.util.Iterator<Property> getPropertiesIterator() {
    return (this.properties == null) ? null : this.properties.iterator();
  }

  public void addToProperties(Property elem) {
    if (this.properties == null) {
      this.properties = new java.util.ArrayList<Property>();
    }
    this.properties.add(elem);
  }

  public java.util.List<Property> getProperties() {
    return this.properties;
  }

  public RequiredWorkerHost setProperties(java.util.List<Property> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getResourcesSize() {
    return (this.resources == null) ? 0 : this.resources.size();
  }

  public java.util.Iterator<Resource> getResourcesIterator() {
    return (this.resources == null) ? null : this.resources.iterator();
  }

  public void addToResources(Resource elem) {
    if (this.resources == null) {
      this.resources = new java.util.ArrayList<Resource>();
    }
    this.resources.add(elem);
  }

  public java.util.List<Resource> getResources() {
    return this.resources;
  }

  public RequiredWorkerHost setResources(java.util.List<Resource> resources) {
    this.resources = resources;
    return this;
  }

  public void unsetResources() {
    this.resources = null;
  }

  /** Returns true if field resources is set (has been assigned a value) and false otherwise */
  public boolean isSetResources() {
    return this.resources != null;
  }

  public void setResourcesIsSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public int getDevicesSize() {
    return (this.devices == null) ? 0 : this.devices.size();
  }

  public java.util.Iterator<RequiredDevice> getDevicesIterator() {
    return (this.devices == null) ? null : this.devices.iterator();
  }

  public void addToDevices(RequiredDevice elem) {
    if (this.devices == null) {
      this.devices = new java.util.ArrayList<RequiredDevice>();
    }
    this.devices.add(elem);
  }

  public java.util.List<RequiredDevice> getDevices() {
    return this.devices;
  }

  public RequiredWorkerHost setDevices(java.util.List<RequiredDevice> devices) {
    this.devices = devices;
    return this;
  }

  public void unsetDevices() {
    this.devices = null;
  }

  /** Returns true if field devices is set (has been assigned a value) and false otherwise */
  public boolean isSetDevices() {
    return this.devices != null;
  }

  public void setDevicesIsSet(boolean value) {
    if (!value) {
      this.devices = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.List<Property>)value);
      }
      break;

    case RESOURCES:
      if (value == null) {
        unsetResources();
      } else {
        setResources((java.util.List<Resource>)value);
      }
      break;

    case DEVICES:
      if (value == null) {
        unsetDevices();
      } else {
        setDevices((java.util.List<RequiredDevice>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTIES:
      return getProperties();

    case RESOURCES:
      return getResources();

    case DEVICES:
      return getDevices();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROPERTIES:
      return isSetProperties();
    case RESOURCES:
      return isSetResources();
    case DEVICES:
      return isSetDevices();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RequiredWorkerHost)
      return this.equals((RequiredWorkerHost)that);
    return false;
  }

  public boolean equals(RequiredWorkerHost that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_resources = true && this.isSetResources();
    boolean that_present_resources = true && that.isSetResources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!this.resources.equals(that.resources))
        return false;
    }

    boolean this_present_devices = true && this.isSetDevices();
    boolean that_present_devices = true && that.isSetDevices();
    if (this_present_devices || that_present_devices) {
      if (!(this_present_devices && that_present_devices))
        return false;
      if (!this.devices.equals(that.devices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetResources()) ? 131071 : 524287);
    if (isSetResources())
      hashCode = hashCode * 8191 + resources.hashCode();

    hashCode = hashCode * 8191 + ((isSetDevices()) ? 131071 : 524287);
    if (isSetDevices())
      hashCode = hashCode * 8191 + devices.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RequiredWorkerHost other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDevices()).compareTo(other.isSetDevices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devices, other.devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RequiredWorkerHost(");
    boolean first = true;

    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resources:");
    if (this.resources == null) {
      sb.append("null");
    } else {
      sb.append(this.resources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("devices:");
    if (this.devices == null) {
      sb.append("null");
    } else {
      sb.append(this.devices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequiredWorkerHostStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequiredWorkerHostStandardScheme getScheme() {
      return new RequiredWorkerHostStandardScheme();
    }
  }

  private static class RequiredWorkerHostStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequiredWorkerHost> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequiredWorkerHost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.properties = new java.util.ArrayList<Property>(_list32.size);
                Property _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new Property();
                  _elem33.read(iprot);
                  struct.properties.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.resources = new java.util.ArrayList<Resource>(_list35.size);
                Resource _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new Resource();
                  _elem36.read(iprot);
                  struct.resources.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.devices = new java.util.ArrayList<RequiredDevice>(_list38.size);
                RequiredDevice _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new RequiredDevice();
                  _elem39.read(iprot);
                  struct.devices.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setDevicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequiredWorkerHost struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
          for (Property _iter41 : struct.properties)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.resources != null) {
        oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
          for (Resource _iter42 : struct.resources)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.devices != null) {
        oprot.writeFieldBegin(DEVICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.devices.size()));
          for (RequiredDevice _iter43 : struct.devices)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequiredWorkerHostTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequiredWorkerHostTupleScheme getScheme() {
      return new RequiredWorkerHostTupleScheme();
    }
  }

  private static class RequiredWorkerHostTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequiredWorkerHost> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequiredWorkerHost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      if (struct.isSetResources()) {
        optionals.set(1);
      }
      if (struct.isSetDevices()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Property _iter44 : struct.properties)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetResources()) {
        {
          oprot.writeI32(struct.resources.size());
          for (Resource _iter45 : struct.resources)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetDevices()) {
        {
          oprot.writeI32(struct.devices.size());
          for (RequiredDevice _iter46 : struct.devices)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequiredWorkerHost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.properties = new java.util.ArrayList<Property>(_list47.size);
          Property _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new Property();
            _elem48.read(iprot);
            struct.properties.add(_elem48);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resources = new java.util.ArrayList<Resource>(_list50.size);
          Resource _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new Resource();
            _elem51.read(iprot);
            struct.resources.add(_elem51);
          }
        }
        struct.setResourcesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.devices = new java.util.ArrayList<RequiredDevice>(_list53.size);
          RequiredDevice _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new RequiredDevice();
            _elem54.read(iprot);
            struct.devices.add(_elem54);
          }
        }
        struct.setDevicesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


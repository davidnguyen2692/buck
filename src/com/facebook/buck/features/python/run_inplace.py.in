#!<PYTHON> -Es

import os
import sys

main_module = <MAIN_MODULE>
modules_dir = <MODULES_DIR>
native_libs_env_var = <NATIVE_LIBS_ENV_VAR>
native_libs_dir = <NATIVE_LIBS_DIR>
native_libs_preload_env_var = <NATIVE_LIBS_PRELOAD_ENV_VAR>
native_libs_preload = <NATIVE_LIBS_PRELOAD>

dirpath = os.path.dirname(os.path.realpath(__file__))

env_vals_to_restore = {}
# Update the environment variable for the dynamic loader to the native
# libraries location.
if native_libs_dir is not None:
    old_native_libs_dir = os.environ.get(native_libs_env_var)
    os.environ[native_libs_env_var] = os.path.join(dirpath, native_libs_dir)
    env_vals_to_restore[native_libs_env_var] = old_native_libs_dir

# Update the environment variable for the dynamic loader to find libraries
# to preload.
if native_libs_preload is not None:
    old_native_libs_preload = os.environ.get(native_libs_preload_env_var)
    os.environ[native_libs_preload_env_var] = native_libs_preload
    env_vals_to_restore[native_libs_preload_env_var] = old_native_libs_preload

STARTUP = """\
# Wrap everything in a private function to prevent globals being captured by
# the `runpy._run_module_as_main` below.
def __run():
    import errno
    import fcntl
    import glob
    import os
    import os.path
    import runpy
    import shutil
    import sys
    import zipfile

    def setenv(var, val):
        if val is None:
            os.environ.pop(var, None)
        else:
            os.environ[var] = val

    def restoreenv(d):
        for k, v in d.items():
            setenv(k, v)

    # Set `argv[0]` to the executing script.
    assert sys.argv[0] == '-c'
    sys.argv[0] = {arg0!r}

    # Replace the working directory with location of the modules directory.
    assert sys.path[0] == ''
    sys.path[0] = {pythonpath!r}

    restoreenv({env_vals!r})
    runpy._run_module_as_main({main_module!r}, False)

__run()
""".format(
    arg0=sys.argv[0],
    pythonpath=os.path.join(dirpath, modules_dir),
    env_vals=env_vals_to_restore,
    main_module=main_module,
    this_file=__file__,
)

args = [sys.executable, '-Es', '-c', STARTUP]

# Default to 'd' warnings, but allow users to control this via PYTHONWARNINGS
# The -E causes python to ignore all PYTHON* environment vars so we have to
# pass this down using the command line.
warnings = os.environ.get('PYTHONWARNINGS', 'd').split(',')
for item in reversed(warnings):
    args.insert(1, '-W{0}'.format(item.strip()))

# Allow users to disable byte code generation by setting the standard environment var.
# Same as above, because of -E we have to pass this down using the command line.
if 'PYTHONDONTWRITEBYTECODE' in os.environ:
    args.insert(1, '-B')

os.execv(sys.executable, args + sys.argv[1:])
